var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
import React, { Fragment, useState } from 'react';
import { Button, Dropdown, DropdownItem, DropdownSeparator, KebabToggle, ToolbarItem } from '@patternfly/react-core';
import { DownloadButton } from '../DownloadButton';
import classNames from 'classnames';
function isActionObject(node) {
    return node.label !== undefined;
}
export var overflowActionsMapper = function (action, key) {
    var internalAction = action;
    return (_createElement(DropdownItem, __assign({}, internalAction.props, { className: "ins-c-primary-toolbar__overflow-actions", key: internalAction.value || internalAction.key || "".concat(key, "-overflow"), component: (internalAction.props && internalAction.props.component) || React.isValidElement(internalAction.label || action) ? 'div' : 'button', onClick: function (e) { return internalAction.onClick && internalAction.onClick(e, internalAction, key); } }), internalAction.label || action));
};
export var actionPropsGenerator = function (action, key) {
    var _a;
    var onClick = typeof action === 'object' && typeof action !== null && typeof (action === null || action === void 0 ? void 0 : action.onClick) === 'function'
        ? function (e) { return action === null || action === void 0 ? void 0 : action.onClick(e, action, key); }
        : undefined;
    return __assign(__assign({}, action === null || action === void 0 ? void 0 : action.props), { onClick: onClick, component: ((_a = action === null || action === void 0 ? void 0 : action.props) === null || _a === void 0 ? void 0 : _a.component) || (React.isValidElement(action.label || action) ? 'div' : 'button'), children: typeof action === 'object' && typeof action !== null ? action === null || action === void 0 ? void 0 : action.label : action });
};
var Actions = function (_a) {
    var _b;
    var _c = _a.actions, actions = _c === void 0 ? [] : _c, _d = _a.overflowActions, overflowActions = _d === void 0 ? [] : _d, _e = _a.onSelect, onSelect = _e === void 0 ? function () { return undefined; } : _e, _f = _a.dropdownProps, dropdownProps = _f === void 0 ? {} : _f, kebabToggleProps = _a.kebabToggleProps, exportConfig = _a.exportConfig;
    var _g = useState(false), isOpen = _g[0], setIsOpen = _g[1];
    var toggleOpen = function (isOpen) { return setIsOpen(isOpen); };
    var firstAction = actions[0], restActions = actions.slice(1);
    var dropdownItems = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], (firstAction
        ? [
            _jsx(DropdownItem, __assign({}, actionPropsGenerator(firstAction, 'first-action'), { className: classNames('ins-c-primary-toolbar__first-action', isActionObject(firstAction) ? (_b = firstAction === null || firstAction === void 0 ? void 0 : firstAction.props) === null || _b === void 0 ? void 0 : _b.className : undefined) }), "first-action"),
        ]
        : []), true), restActions.map(function (action, key) {
        var _a;
        return (_jsx(DropdownItem, __assign({}, actionPropsGenerator(action, key)), (action === null || action === void 0 ? void 0 : action.key) || ((_a = action === null || action === void 0 ? void 0 : action.props) === null || _a === void 0 ? void 0 : _a.key) || key));
    }), true), (actions.length > 0 && overflowActions.length > 0
        ? [_jsx(DropdownSeparator, { className: "ins-c-primary-toolbar__overflow-actions-separator" }, "separator")]
        : []), true), overflowActions.map(function (action, key) { return overflowActionsMapper(action, key); }), true);
    return (_jsxs(Fragment, { children: [firstAction && (_jsx(ToolbarItem, __assign({ className: "ins-c-primary-toolbar__first-action pf-m-spacer-sm" }, { children: isActionObject(firstAction) ? (_jsx(Button, __assign({ ouiaId: "".concat(firstAction.label) }, firstAction.props, { onClick: firstAction.onClick || (firstAction.props && firstAction.props.onClick) || undefined }, { children: firstAction.label }))) : (firstAction) }))), exportConfig && (exportConfig.extraItems || exportConfig.onSelect) && (_jsx(ToolbarItem, __assign({ className: "pf-m-spacer-sm" }, { children: _jsx(DownloadButton, __assign({}, exportConfig)) }))), ((actions && (actions === null || actions === void 0 ? void 0 : actions.length) > 0) || overflowActions.length > 0) && (_jsx(ToolbarItem, __assign({ className: "".concat(actions.length <= 1 ? 'ins-m-actions--empty' : '', " ins-c-primary-toolbar__actions pf-m-spacer-sm") }, { children: _jsx(Dropdown, __assign({}, dropdownProps, { isOpen: isOpen, isPlain: true, onSelect: function () {
                        var props = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            props[_i] = arguments[_i];
                        }
                        onSelect && onSelect.apply(void 0, props);
                        toggleOpen(false);
                    }, ouiaId: "Actions", toggle: _jsx(KebabToggle, __assign({}, kebabToggleProps, { onToggle: function (isOpen) {
                            toggleOpen(isOpen);
                        } })), dropdownItems: dropdownItems })) })))] }));
};
export default Actions;
//# sourceMappingURL=Actions.js.map
var MiddlewareListener = (function () {
    function MiddlewareListener() {
        this.listeners = new Set();
    }
    MiddlewareListener.prototype.getListeners = function () {
        return this.listeners;
    };
    MiddlewareListener.prototype.getMiddleware = function () {
        var _this = this;
        return function () { return function (next) { return function (action) {
            var preventBubble = _this.callOnAction(action.type, action.payload);
            if (preventBubble) {
                next({ type: '@@config/action-stopped', payload: action });
            }
            else {
                next(action);
            }
        }; }; };
    };
    MiddlewareListener.prototype.addNew = function (listener) {
        var _this = this;
        this.listeners.add(listener);
        return function () { return _this.listeners.delete(listener); };
    };
    MiddlewareListener.prototype.callOnAction = function (action, data) {
        var stopBubble = false;
        var preventBubble = function () { return (stopBubble = true); };
        var listeners = Array.from(this.listeners);
        for (var i = 0; i < listeners.length; i++) {
            listeners[i].on === action && listeners[i].hasOwnProperty('callback') && listeners[i].callback({ data: data, preventBubble: preventBubble });
        }
        return stopBubble;
    };
    return MiddlewareListener;
}());
export { MiddlewareListener };
export default MiddlewareListener;
//# sourceMappingURL=MiddlewareListener.js.map
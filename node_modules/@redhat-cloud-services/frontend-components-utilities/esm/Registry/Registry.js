var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import ReducerRegistry from '../ReducerRegistry';
export var registry;
function init(initialState, middleware, composeEnhancersDefault) {
    if (initialState === void 0) { initialState = {}; }
    if (middleware === void 0) { middleware = []; }
    if (!registry) {
        registry = new ReducerRegistry(initialState, __spreadArray([], middleware, true), composeEnhancersDefault);
    }
    registry.register({
        routerData: function (state, _a) {
            var type = _a.type, payload = _a.payload;
            return __assign(__assign({}, state), (type === '@@INSIGHTS-CORE/NAVIGATION' ? payload : {}));
        },
    });
    return registry;
}
export function registryDecorator() {
    return function (target) {
        target.prototype.getRegistry = function () { return registry; };
    };
}
export function getRegistry(initialState, middleware, composeEnhancersDefault) {
    if (initialState === void 0) { initialState = {}; }
    if (middleware === void 0) { middleware = []; }
    return init(initialState, middleware, composeEnhancersDefault);
}
export default registryDecorator;
//# sourceMappingURL=Registry.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { applyMiddleware, combineReducers, compose, createStore } from 'redux';
export function applyReducerHash(reducerHash, initialState) {
    if (initialState === void 0) { initialState = {}; }
    return function (state, action) {
        if (state === void 0) { state = initialState; }
        if (Object.prototype.hasOwnProperty.call(reducerHash, action.type)) {
            return reducerHash[action.type](state, action);
        }
        return state;
    };
}
export function dispatchActionsToStore(actions, store) {
    return Object.keys(actions).reduce(function (acc, curr) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[curr] = function () {
            var passTrough = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                passTrough[_i] = arguments[_i];
            }
            return store && store.dispatch(actions[curr].apply(actions, passTrough));
        }, _a)));
    }, {});
}
var ReducerRegistry = (function () {
    function ReducerRegistry(initState, middlewares, composeEnhancersDefault) {
        if (initState === void 0) { initState = {}; }
        if (middlewares === void 0) { middlewares = []; }
        if (composeEnhancersDefault === void 0) { composeEnhancersDefault = compose; }
        var composeEnhancers = (typeof window !== 'undefined' && window.REDUX_DEVTOOLS_EXTENSION_COMPOSE) || composeEnhancersDefault;
        this.store = createStore(function (state) {
            if (state === void 0) { state = initState; }
            return state;
        }, initState, composeEnhancers(applyMiddleware.apply(void 0, middlewares)));
        this.reducers = {};
    }
    ReducerRegistry.prototype.getStore = function () {
        return this.store;
    };
    ReducerRegistry.prototype.register = function (newReducers) {
        var _this = this;
        this.reducers = __assign(__assign({}, this.reducers), newReducers);
        this.store.replaceReducer(combineReducers(__assign({}, this.reducers)));
        return function () {
            _this.reducers = Object.entries(_this.reducers)
                .filter(function (_a) {
                var reducer = _a[0];
                return !Object.keys(newReducers).includes(reducer);
            })
                .reduce(function (acc, _a) {
                var _b;
                var key = _a[0], val = _a[1];
                return (__assign(__assign({}, acc), (_b = {}, _b[key] = val, _b)));
            }, {});
            _this.store.replaceReducer(combineReducers(__assign({}, _this.reducers)));
        };
    };
    return ReducerRegistry;
}());
export { ReducerRegistry };
export var reduxRegistry = new ReducerRegistry();
export default ReducerRegistry;
//# sourceMappingURL=ReducerRegistry.js.map
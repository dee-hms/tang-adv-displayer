import _ from 'lodash';
import { ROW, TABLE, TBODY, TITLE } from './selectors';
import { findElementByOuiaId } from './CustomCommands';
findElementByOuiaId();
export function checkTableHeaders(expectedHeaders) {
    return cy
        .get('table th[scope="col"]')
        .then(function ($els) {
        return _.map(Cypress.$.makeArray($els), 'innerText');
    })
        .should('deep.equal', expectedHeaders);
}
export function checkRowCounts(n, isSelectableTable) {
    if (isSelectableTable === void 0) { isSelectableTable = false; }
    return isSelectableTable ? cy.get('table').find(TBODY).should('have.length', n) : cy.get('table').find(TBODY).find(ROW).should('have.length', n);
}
export function columnName2UrlParam(name) {
    return name.toLowerCase().replace(/ /g, '_');
}
export function tableIsSortedBy(columnTitle) {
    return cy.get('table').find("th[data-label=\"".concat(columnTitle, "\"]")).should('have.class', 'pf-c-table__sort pf-m-selected');
}
export function checkEmptyState(title, checkIcon) {
    if (checkIcon === void 0) { checkIcon = false; }
    checkRowCounts(1);
    cy.get(TABLE)
        .ouiaId('empty-state')
        .should('have.length', 1)
        .within(function () {
        cy.get('.pf-c-empty-state__icon').should('have.length', checkIcon ? 1 : 0);
        cy.get("h5".concat(TITLE)).should('have.text', title);
    });
}
//# sourceMappingURL=TableUtils.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_core_1 = require("@patternfly/react-core");
var errorStackClass = 'ins-error-boundary-stack';
var ErrorStack = function (_a) {
    var error = _a.error;
    if (error.stack) {
        return ((0, jsx_runtime_1.jsx)(react_core_1.Text, __assign({ className: errorStackClass }, { children: error.stack.split('\n').map(function (line) { return ((0, jsx_runtime_1.jsx)("div", { children: line }, line)); }) })));
    }
    if (error.name && error.message) {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_core_1.Text, __assign({ component: "h6" }, { children: error.name })), (0, jsx_runtime_1.jsx)(react_core_1.Text, __assign({ className: errorStackClass, component: "blockquote" }, { children: error.message }))] }));
    }
    return ((0, jsx_runtime_1.jsx)(react_core_1.Text, __assign({ className: errorStackClass, component: "blockquote" }, { children: error.toString() })));
};
exports.default = ErrorStack;
//# sourceMappingURL=ErrorStack.js.map
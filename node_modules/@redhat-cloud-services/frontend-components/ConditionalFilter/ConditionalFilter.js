"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var global_breakpoint_md_1 = __importDefault(require("@patternfly/react-tokens/dist/js/global_breakpoint_md"));
var react_core_1 = require("@patternfly/react-core");
var react_icons_1 = require("@patternfly/react-icons");
var TextFilter_1 = __importDefault(require("./TextFilter"));
var conditionalFilterConstants_1 = require("./conditionalFilterConstants");
require("./conditional-filter.css");
var ConditionalFilter = function (_a) {
    var _b = _a.hideLabel, hideLabel = _b === void 0 ? false : _b, _c = _a.id, id = _c === void 0 ? 'default-input' : _c, _d = _a.isDisabled, isDisabled = _d === void 0 ? false : _d, _f = _a.items, items = _f === void 0 ? [] : _f, onChange = _a.onChange, placeholder = _a.placeholder, _g = _a.useMobileLayout, useMobileLayout = _g === void 0 ? false : _g, _h = _a.value, value = _h === void 0 ? '' : _h, innerRef = _a.innerRef;
    var breakpointConstant = parseInt(global_breakpoint_md_1.default.value.replace('px', ''));
    var updateFilterViewport = function (width) { return width <= breakpointConstant; };
    var _j = (0, react_1.useState)(false), isOpen = _j[0], setIsOpen = _j[1];
    var _k = (0, react_1.useState)(), stateValue = _k[0], setStateValue = _k[1];
    var _l = (0, react_1.useState)(updateFilterViewport(window.innerWidth)), isMobile = _l[0], setIsMobile = _l[1];
    var resizeListener = (0, react_1.useRef)(function (event) {
        setIsMobile(updateFilterViewport((event === null || event === void 0 ? void 0 : event.target).innerWidth));
    });
    (0, react_1.useEffect)(function () {
        useMobileLayout ||
            console.warn("The prop \"useMobileLayout\" is set to false. You are using an outdated mobile layout of conditional filter.\n    Please switch to new layout by adding \"useMobileLayout={true}\" prop to the PrimaryToolbar or ConditionalFilter directly.\n    The new mobile layout will become the default in next minor release.");
        window.addEventListener('resize', resizeListener.current);
        return function () {
            resizeListener.current && window.removeEventListener('resize', resizeListener.current);
        };
    }, []);
    var currentValue = onChange ? value : stateValue;
    var activeItem = items && items.length && (items.find(function (item, key) { return item.value === currentValue || key === Number(currentValue); }) || items[0]);
    var onChangeDefault = function (_e, value) { return setStateValue(value); };
    var onChangeCallback = onChange || onChangeDefault;
    var shouldRenderNewLayout = useMobileLayout && isMobile;
    var capitalize = function (string) { return string[0].toUpperCase() + string.substring(1); };
    var ActiveComponent = activeItem && (conditionalFilterConstants_1.typeMapper[activeItem.type] || conditionalFilterConstants_1.typeMapper.text);
    var Wrapper = useMobileLayout && isMobile
        ? function (props) { return (0, jsx_runtime_1.jsx)(react_core_1.ToolbarToggleGroup, __assign({}, props, { breakpoint: "md", toggleIcon: (0, jsx_runtime_1.jsx)(react_icons_1.FilterIcon, {}) })); }
        : react_1.Fragment;
    return ((0, jsx_runtime_1.jsxs)(Wrapper, { children: [useMobileLayout && isMobile && ((0, jsx_runtime_1.jsx)(react_core_1.ToolbarGroup, __assign({ className: "ins-c-conditional-filter mobile" }, { children: items.map(function (activeItem, key) {
                    var ActiveComponent = activeItem && (conditionalFilterConstants_1.typeMapper[activeItem.type] || conditionalFilterConstants_1.typeMapper.text);
                    return ((0, jsx_runtime_1.jsx)(react_core_1.ToolbarItem, { children: (0, jsx_runtime_1.jsx)(ActiveComponent, __assign({}, (activeItem.type !== conditionalFilterConstants_1.conditionalFilterType.custom && {
                            placeholder: placeholder || activeItem.placeholder || "Filter by ".concat(activeItem.label),
                            id: activeItem.filterValues ? activeItem.filterValues.id : currentValue ? String(currentValue) : undefined,
                            innerRef: innerRef,
                        }), activeItem.filterValues)) }, key));
                }) }))), !shouldRenderNewLayout && ((0, jsx_runtime_1.jsx)(react_1.Fragment, { children: !items || (items && items.length <= 0) ? ((0, jsx_runtime_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ins-c-conditional-filter', {
                        desktop: useMobileLayout,
                    }) }, { children: (0, jsx_runtime_1.jsx)(TextFilter_1.default, { innerRef: innerRef, id: id, isDisabled: isDisabled, onChange: function (e) { return onChangeCallback(e, e.target.value); }, placeholder: placeholder, value: currentValue ? String(currentValue) : undefined, "widget-type": "InsightsInput" }) }))) : ((0, jsx_runtime_1.jsxs)(react_core_1.Split, __assign({ className: (0, classnames_1.default)('ins-c-conditional-filter', {
                        desktop: useMobileLayout,
                    }) }, { children: [items.length > 1 && ((0, jsx_runtime_1.jsx)(react_core_1.SplitItem, { children: (0, jsx_runtime_1.jsx)(react_core_1.Dropdown, { ref: innerRef, className: "ins-c-conditional-filter__group", onSelect: function () { return setIsOpen(false); }, isOpen: isOpen, ouiaId: "ConditionalFilter", toggle: (0, jsx_runtime_1.jsxs)(react_core_1.DropdownToggle, __assign({ "aria-label": "Conditional filter", onToggle: setIsOpen, isDisabled: isDisabled, className: hideLabel ? 'ins-c-conditional-filter__no-label' : '', ouiaId: "ConditionalFilter" }, { children: [(0, jsx_runtime_1.jsx)(react_icons_1.FilterIcon, { size: "sm" }), !hideLabel && ((0, jsx_runtime_1.jsx)("span", __assign({ className: "ins-c-conditional-filter__value-selector" }, { children: activeItem && capitalize(String(activeItem.label)) })))] })), dropdownItems: items.map(function (item, key) { return ((0, jsx_runtime_1.jsx)(react_core_1.DropdownItem, __assign({ component: "button", ouiaId: String(item.label), onClick: function (e) { return onChangeCallback(e, item.value || key); }, isHovered: activeItem.label === item.label }, { children: capitalize(String(item.label)) }), item.id ? "".concat(item.id, "-dropdown") : key)); }) }) })), ActiveComponent && ((0, jsx_runtime_1.jsx)(react_core_1.SplitItem, __assign({ isFilled: true }, { children: (0, jsx_runtime_1.jsx)(ActiveComponent, __assign({}, (activeItem.type !== conditionalFilterConstants_1.conditionalFilterType.custom && {
                                placeholder: placeholder || activeItem.placeholder || "Filter by ".concat(activeItem.label),
                                id: (activeItem.filterValues && activeItem.filterValues.id) || currentValue ? String(currentValue) : undefined,
                            }), activeItem.filterValues)) })))] }))) }))] }));
};
exports.default = ConditionalFilter;
//# sourceMappingURL=ConditionalFilter.js.map
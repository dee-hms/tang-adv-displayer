var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ExclamationCircleIcon } from '@patternfly/react-icons/';
import DefaultErrorMessage from './DefaultErrorMessage';
import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Stack, StackItem, Title, } from '@patternfly/react-core';
import '../ErrorState/error-state.css';
var ErrorState = function (_a) {
    var _b = _a.errorTitle, errorTitle = _b === void 0 ? 'Something went wrong' : _b, errorDescription = _a.errorDescription, props = __rest(_a, ["errorTitle", "errorDescription"]);
    return (_jsxs(EmptyState, __assign({ variant: EmptyStateVariant.large }, props, { className: "ins-c-error-state" }, { children: [_jsx(EmptyStateIcon, { icon: ExclamationCircleIcon }), _jsx(Title, __assign({ headingLevel: "h4", size: "lg" }, { children: errorTitle })), _jsx(EmptyStateBody, { children: _jsxs(Stack, { children: [!errorDescription && _jsx(StackItem, { children: "There was a problem processing the request. Please try again." }), _jsx(StackItem, { children: errorDescription || _jsx(DefaultErrorMessage, {}) })] }) }), document.referrer ? (_jsx(Button, __assign({ variant: "primary", onClick: function () { return history.back(); } }, { children: "Return to last page" }))) : (_jsx(Button, __assign({ variant: "primary", component: "a", href: ".", target: "_blank", rel: "noopener noreferrer" }, { children: "Go to home page" })))] })));
};
export default ErrorState;
//# sourceMappingURL=ErrorState.js.map
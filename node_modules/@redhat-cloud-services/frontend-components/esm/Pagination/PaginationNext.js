var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import PaginationNav from './PaginationNav';
import PaginationMenu from './PaginationMenu';
var PaginationNext = function (_a) {
    var className = _a.className, page = _a.page, lastPage = _a.lastPage, setPage = _a.setPage, itemsStart = _a.itemsStart, itemsEnd = _a.itemsEnd, widtgetId = _a.widtgetId, onSetPerPage = _a.onSetPerPage, itemCount = _a.itemCount, perPageOptions = _a.perPageOptions, dropDirection = _a.dropDirection, amountOfPages = _a.amountOfPages, onFirstPage = _a.onFirstPage, onLastPage = _a.onLastPage, onPreviousPage = _a.onPreviousPage, onNextPage = _a.onNextPage, perPage = _a.perPage, props = __rest(_a, ["className", "page", "lastPage", "setPage", "itemsStart", "itemsEnd", "widtgetId", "onSetPerPage", "itemCount", "perPageOptions", "dropDirection", "amountOfPages", "onFirstPage", "onLastPage", "onPreviousPage", "onNextPage", "perPage"]);
    return (_jsxs("div", __assign({ className: "pf-c-pagination pf-m-footer ".concat(className), "aria-label": "Element pagination" }, props, { children: [_jsx(PaginationMenu, { itemsStart: itemsStart, itemsEnd: itemsEnd, widtgetId: widtgetId, dropDirection: dropDirection, onSetPerPage: onSetPerPage, itemCount: itemCount, perPage: perPage, perPageOptions: perPageOptions }), _jsx(PaginationNav, { lastPage: lastPage, page: page, setPage: setPage, onFirstPage: onFirstPage, onLastPage: onLastPage, onPreviousPage: onPreviousPage, onNextPage: onNextPage })] })));
};
export default PaginationNext;
//# sourceMappingURL=PaginationNext.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Button, Pagination, Toolbar, ToolbarContent, ToolbarExpandIconWrapper, ToolbarGroup, ToolbarItem, } from '@patternfly/react-core';
import { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';
import { SortByDirection } from '@patternfly/react-table';
import Actions from './Actions';
import { BulkSelect } from '../BulkSelect';
import { ConditionalFilter } from '../ConditionalFilter';
import { FilterChips } from '../FilterChips';
import SortBy from './SortBy';
import '../PrimaryToolbar/primary-toolbar.css';
function isPrimaryToolbarExpandAllObject(node) {
    return !React.isValidElement(node);
}
var PrimaryToolbar = function (_a) {
    var id = _a.id, className = _a.className, _b = _a.toggleIsExpanded, toggleIsExpanded = _b === void 0 ? function () { return undefined; } : _b, bulkSelect = _a.bulkSelect, filterConfig = _a.filterConfig, dedicatedAction = _a.dedicatedAction, actionsConfig = _a.actionsConfig, sortByConfig = _a.sortByConfig, pagination = _a.pagination, activeFiltersConfig = _a.activeFiltersConfig, children = _a.children, exportConfig = _a.exportConfig, expandAll = _a.expandAll, useMobileLayout = _a.useMobileLayout, props = __rest(_a, ["id", "className", "toggleIsExpanded", "bulkSelect", "filterConfig", "dedicatedAction", "actionsConfig", "sortByConfig", "pagination", "activeFiltersConfig", "children", "exportConfig", "expandAll", "useMobileLayout"]);
    var overflowActions = __spreadArray([], (sortByConfig
        ? [
            {
                label: 'Sort order ASC',
                props: { isDisabled: sortByConfig.direction === SortByDirection.asc },
                onClick: function (e) { return sortByConfig.onSortChange && sortByConfig.onSortChange(e, SortByDirection.asc); },
            },
            {
                label: 'Sort order DESC',
                props: { isDisabled: sortByConfig.direction === SortByDirection.desc },
                onClick: function (e) { return sortByConfig.onSortChange && sortByConfig.onSortChange(e, SortByDirection.desc); },
            },
        ]
        : []), true);
    return (_jsxs(Toolbar, __assign({}, props, { className: "".concat(className || '', " ins-c-primary-toolbar"), toggleIsExpanded: toggleIsExpanded, id: id ? "".concat(id) : 'ins-primary-data-toolbar', ouiaId: "PrimaryToolbar" }, { children: [_jsxs(ToolbarContent, { children: [(expandAll || bulkSelect || filterConfig || dedicatedAction) && (_jsxs(ToolbarGroup, __assign({ className: "ins-c-primary-toolbar__group-filter pf-m-spacer-md pf-m-space-items-lg", variant: "filter-group" }, { children: [expandAll && (_jsx(ToolbarItem, { children: isPrimaryToolbarExpandAllObject(expandAll) ? (_jsx(Button, __assign({}, expandAll.buttonProps, { variant: "plain", "aria-label": "".concat(expandAll.isAllExpanded ? 'Collapse' : 'Expand', " all"), onClick: function (e) { return expandAll.onClick(e, !expandAll.isAllExpanded); }, ouiaId: "ExpandCollapseAll", isDisabled: expandAll.isDisabled }, { children: _jsx(ToolbarExpandIconWrapper, { children: expandAll.isAllExpanded ? _jsx(AngleDownIcon, {}) : _jsx(AngleRightIcon, {}) }) }))) : (expandAll) })), bulkSelect && (_jsx(ToolbarItem, { children: React.isValidElement(bulkSelect) ? bulkSelect : _jsx(BulkSelect, __assign({ ouiaId: "BulkSelect" }, bulkSelect)) })), filterConfig && (_jsx(ToolbarItem, __assign({ className: "ins-c-primary-toolbar__filter" }, { children: React.isValidElement(filterConfig) ? filterConfig : _jsx(ConditionalFilter, __assign({ useMobileLayout: useMobileLayout }, filterConfig)) }))), dedicatedAction && _jsx(ToolbarItem, { children: dedicatedAction })] }))), React.isValidElement(actionsConfig)
                        ? actionsConfig
                        : ((actionsConfig && actionsConfig.actions && actionsConfig.actions.length > 0) || sortByConfig || exportConfig) && (_jsx(Actions, __assign({}, (actionsConfig || {}), { exportConfig: exportConfig, overflowActions: overflowActions }))), sortByConfig && (_jsx(ToolbarItem, __assign({ className: "ins-c-primary-toolbar__sort-by" }, { children: React.isValidElement(sortByConfig) ? sortByConfig : _jsx(SortBy, __assign({}, sortByConfig)) }))), children, pagination && (_jsx(ToolbarItem, __assign({ className: "ins-c-primary-toolbar__pagination" }, { children: React.isValidElement(pagination) ? pagination : _jsx(Pagination, __assign({ isCompact: true, ouiaId: "CompactPagination" }, pagination)) })))] }), activeFiltersConfig && React.isValidElement(activeFiltersConfig) ? (_jsx(ToolbarContent, { children: _jsx(ToolbarItem, { children: activeFiltersConfig }) })) : (typeof (activeFiltersConfig === null || activeFiltersConfig === void 0 ? void 0 : activeFiltersConfig.filters) !== 'undefined' &&
                (activeFiltersConfig.filters.length > 0 || activeFiltersConfig.showDeleteButton === true) && (_jsx(ToolbarContent, { children: _jsx(ToolbarItem, { children: _jsx(FilterChips, __assign({}, activeFiltersConfig)) }) })))] })));
};
export default PrimaryToolbar;
//# sourceMappingURL=PrimaryToolbar.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import classNames from 'classnames';
import { Button } from '@patternfly/react-core';
import { TagIcon } from '@patternfly/react-icons';
import '../TagCount/tagCount.css';
var TagCount = function (_a) {
    var count = _a.count, _b = _a.onTagClick, onTagClick = _b === void 0 ? function () { return undefined; } : _b, className = _a.className, props = __rest(_a, ["count", "onTagClick", "className"]);
    return (_jsxs(Button, __assign({}, props, { variant: "plain", isDisabled: !count, className: classNames('ins-c-tag-count', className), onClick: onTagClick }, { children: [_jsx(TagIcon, { size: "md" }), _jsx("span", __assign({ className: "ins-c-tag__text" }, { children: count }))] })));
};
export default TagCount;
//# sourceMappingURL=TagCount.js.map
import React, { ReactNode } from 'react';
import { FilterValue } from './TextFilter';
import { RadioFilterProps } from './RadioFilter';
import { CheckboxFilterProps } from './CheckboxFilter';
import { GroupFilterProps } from './GroupFilter';
import './conditional-filter.scss';
export declare type FilterValues = TextInputProps & RadioFilterProps & CheckboxFilterProps & GroupFilterProps & {
    items?: FilterValue[];
};
export interface TextInputProps {
    id?: string;
    onChange?: (e: React.MouseEvent | React.ChangeEvent | React.FormEvent<HTMLInputElement>, selection?: number | string) => void;
    placeholder?: string;
    value?: string;
}
export interface ConditionalFilterItem {
    id?: string;
    label?: ReactNode;
    value?: string;
    type: 'text' | 'checkbox' | 'radio' | 'custom' | 'group';
    filterValues?: Omit<FilterValues, 'value'> & {
        value?: string | string[] | FilterValue | FilterValue[] | Record<string, unknown>;
    };
    placeholder?: string;
}
export interface ConditionalFilterProps<R extends HTMLElement = any> extends TextInputProps {
    hideLabel?: boolean;
    items: ConditionalFilterItem[];
    id?: string;
    isDisabled?: boolean;
    useMobileLayout?: boolean;
    innerRef?: React.Ref<R>;
}
declare const ConditionalFilter: React.FunctionComponent<ConditionalFilterProps>;
export default ConditionalFilter;

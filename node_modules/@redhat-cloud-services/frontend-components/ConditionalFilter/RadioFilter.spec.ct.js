"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("@cypress/react");
var RadioFilter_1 = __importDefault(require("./RadioFilter"));
describe('RadioFilter component', function () {
    var config = {
        items: [
            {
                label: 'foo',
                value: 'val1',
            },
            {
                label: 'bar',
                value: 'val2',
            },
        ],
    };
    it('renders empty', function () {
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(RadioFilter_1.default, {}));
        cy.get('.ins-c-conditional-filter');
    });
    it('renders disabled', function () {
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(RadioFilter_1.default, __assign({}, config, { isDisabled: true })));
        cy.get('.pf-c-select__toggle').should('be.disabled');
    });
    it('renders with data', function () {
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(RadioFilter_1.default, __assign({}, config)));
        cy.get('.pf-c-select__toggle').click();
        cy.get('.pf-c-select__menu').children().should('have.length', 2);
    });
    it('renders with default value and placeholder', function () {
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(RadioFilter_1.default, __assign({}, config, { value: "val2", placeholder: "baz" })));
        cy.get('.pf-c-select__toggle').click();
        cy.get('.pf-c-select__menu')
            .children()
            .eq(1)
            .within(function () {
            cy.get('.pf-c-radio__input').should('be.checked');
        });
        cy.get('.pf-c-select__toggle-text').should('contain', 'baz');
    });
    it('onChange called', function () {
        var changeSpy = cy.spy().as('cSpy');
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(RadioFilter_1.default, __assign({}, config, { onChange: changeSpy })));
        cy.get('.pf-c-select__toggle').click();
        cy.get('.pf-c-select__menu').children().eq(1).click();
        cy.get('@cSpy').should('have.been.called');
    });
});
//# sourceMappingURL=RadioFilter.spec.ct.js.map
import { AnyAction, Dispatch } from 'redux';
export declare type Listener<T = any> = {
    callback: (data: {
        data: T;
        preventBubble: () => boolean;
    }) => void;
    on: string;
};
export declare class MiddlewareListener {
    listeners: Set<Listener>;
    constructor();
    getListeners(): Set<Listener<any>>;
    getMiddleware(): () => (next: Dispatch<AnyAction>) => (action: AnyAction) => void;
    addNew(listener: Listener): () => boolean;
    callOnAction(action: string, data: unknown): boolean;
}
export default MiddlewareListener;

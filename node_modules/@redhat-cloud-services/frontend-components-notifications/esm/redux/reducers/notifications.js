var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from '../actions/action-types';
var addNotification = function (notifications, _a) {
    var payload = _a.payload;
    return __spreadArray(__spreadArray([], notifications, true), [payload], false);
};
var removeNotification = function (notifications, _a) {
    var payload = _a.payload;
    var index = notifications.findIndex(function (_a) {
        var id = _a.id;
        return id === payload;
    });
    return __spreadArray(__spreadArray([], notifications.slice(0, index), true), notifications.slice(index + 1), true);
};
var clearNotifications = function () { return []; };
export var defaultState = [];
export var notificationsReducers = function (state, action) {
    if (state === void 0) { state = defaultState; }
    switch (action.type) {
        case ADD_NOTIFICATION:
            return addNotification(state, action);
        case REMOVE_NOTIFICATION:
            return removeNotification(state, action);
        case CLEAR_NOTIFICATIONS:
            return clearNotifications();
        default:
            return state;
    }
};
export var notifications = notificationsReducers;
export default notifications;
//# sourceMappingURL=notifications.js.map
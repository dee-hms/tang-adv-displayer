var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createElement as _createElement } from "react";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment, useState } from 'react';
import { Radio, Select, SelectOption, SelectVariant } from '@patternfly/react-core';
import TextFilter, { isFilterValue } from './TextFilter';
var RadioFilter = function (_a) {
    var _b = _a.items, items = _b === void 0 ? [] : _b, _c = _a.onChange, onChange = _c === void 0 ? function () { return undefined; } : _c, _d = _a.isDisabled, isDisabled = _d === void 0 ? false : _d, props = __rest(_a, ["items", "onChange", "isDisabled"]);
    var placeholder = props.placeholder, className = props.className, value = props.value;
    var selectedValue = value;
    var _e = useState(false), isExpanded = _e[0], setExpanded = _e[1];
    var _f = useState(), checked = _f[0], setChecked = _f[1];
    var calculateSelected = function () {
        if (selectedValue) {
            return isFilterValue(selectedValue) ? selectedValue.value : selectedValue;
        }
        else if (checked) {
            return isFilterValue(checked) ? checked.value : checked;
        }
    };
    var onSelect = function (event, selection) {
        onChange === null || onChange === void 0 ? void 0 : onChange(event, selection);
        setChecked(selection);
    };
    var checkedValue = calculateSelected();
    return (_jsx(Fragment, { children: !items || (items && items.length <= 0) ? (_jsx(TextFilter, __assign({}, props, { onChange: onChange, isDisabled: isDisabled, value: "".concat(calculateSelected()) }))) : (_jsx(Select, __assign({ className: className, variant: SelectVariant.single, "aria-label": "Select Input", isDisabled: isDisabled, onToggle: function (value) { return setExpanded(value); }, onSelect: function (event, value) { return onSelect(event, value); }, isOpen: isExpanded, placeholderText: placeholder, ouiaId: placeholder }, { children: items.map(function (_a, key) {
                var value = _a.value, isChecked = _a.isChecked, onChange = _a.onChange, label = _a.label, id = _a.id, item = __rest(_a, ["value", "isChecked", "onChange", "label", "id"]);
                return (_createElement(SelectOption, __assign({}, item, { key: id || key, value: value || '' + key }),
                    _jsx(Radio, { name: id || "".concat(key, "-radio"), label: label, value: value || key, isChecked: isChecked ||
                            (checkedValue !== undefined && checkedValue === value) ||
                            (checkedValue !== undefined && checkedValue === '' + key) ||
                            false, onChange: function (_value, e) { return onChange === null || onChange === void 0 ? void 0 : onChange(e, __assign({ id: id, label: label, value: value, isChecked: isChecked }, item), key); }, id: id || "".concat(value, "-").concat(key) })));
            }) }))) }));
};
export default RadioFilter;
//# sourceMappingURL=RadioFilter.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import PropTypes from 'prop-types';
import { matchPath, withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import isEqual from 'lodash/isEqual';
var RouterParams = (function (_super) {
    __extends(RouterParams, _super);
    function RouterParams() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RouterParams.prototype.componentDidMount = function () {
        var _a = this.props, _b = _a.match, params = _b.params, path = _b.path, url = _b.url, onPathChange = _a.onPathChange, location = _a.location;
        if (matchPath(location.pathname, { path: url, exact: true })) {
            onPathChange &&
                onPathChange({
                    params: params,
                    path: path,
                });
        }
    };
    RouterParams.prototype.componentDidUpdate = function () {
        var _a = this.props, _b = _a.match, params = _b.params, path = _b.path, url = _b.url, onPathChange = _a.onPathChange, location = _a.location, routerData = _a.routerData;
        if (routerData && (!isEqual(params, routerData.params) || path !== routerData.path)) {
            if (matchPath(location.pathname, { path: url, exact: true })) {
                onPathChange &&
                    onPathChange({
                        params: params,
                        path: path,
                    });
            }
        }
    };
    RouterParams.prototype.render = function () {
        var _a = this.props, onPathChange = _a.onPathChange, routerData = _a.routerData, staticContext = _a.staticContext, Component = _a.Component, props = __rest(_a, ["onPathChange", "routerData", "staticContext", "Component"]);
        return _jsx(Component, __assign({}, props));
    };
    return RouterParams;
}(React.Component));
RouterParams.propTypes = {
    match: PropTypes.shape({ params: PropTypes.object, path: PropTypes.string, url: PropTypes.string }).isRequired,
    onPathChange: PropTypes.func,
    location: PropTypes.shape({ pathname: PropTypes.string.isRequired }).isRequired,
    routerData: PropTypes.shape({
        params: PropTypes.object,
        path: PropTypes.string,
    }).isRequired,
    staticContext: PropTypes.any,
    Component: PropTypes.any,
};
var routerParams = function (Component) {
    return withRouter(connect(function (_a) {
        var routerData = _a.routerData;
        return ({ routerData: routerData });
    }, function (dispatch) { return ({
        onPathChange: function (data) {
            return dispatch({
                type: '@@INSIGHTS-CORE/NAVIGATION',
                payload: data,
            });
        },
    }); })(function (props) { return _jsx(RouterParams, __assign({}, props, { Component: Component })); }));
};
export default routerParams;
//# sourceMappingURL=RouterParams.js.map
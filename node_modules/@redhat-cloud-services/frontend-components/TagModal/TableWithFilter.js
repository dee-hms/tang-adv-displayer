"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var react_core_1 = require("@patternfly/react-core");
var react_table_1 = require("@patternfly/react-table");
var EmptyTable_1 = require("../EmptyTable");
var TableToolbar_1 = require("../TableToolbar");
var PrimaryToolbar_1 = require("../PrimaryToolbar");
var Skeleton_1 = require("../Skeleton");
var SkeletonTable_1 = require("../SkeletonTable");
var TableWithFilter = function (_a) {
    var _b = _a.rows, rows = _b === void 0 ? [] : _b, onSelect = _a.onSelect, _c = _a.selected, selected = _c === void 0 ? [] : _c, onUpdateData = _a.onUpdateData, pagination = _a.pagination, loaded = _a.loaded, calculateChecked = _a.calculateChecked, unique = _a.unique, filters = _a.filters, primaryToolbarProps = _a.primaryToolbarProps, children = _a.children, title = _a.title, systemName = _a.systemName, _d = _a.columns, columns = _d === void 0 ? [] : _d, tableProps = _a.tableProps, _f = _a.entityName, entityName = _f === void 0 ? 'tags' : _f, bulkSelect = _a.bulkSelect;
    var onRowSelect = function (_a) {
        var isSelected = _a.isSelected, rowId = _a.rowId;
        var currRow = rows === null || rows === void 0 ? void 0 : rows[rowId];
        if (currRow && onSelect) {
            onSelect(isSelected ? __spreadArray(__spreadArray([], selected, true), [currRow], false) : selected.filter(function (_a) {
                var id = _a.id;
                return id !== currRow.id;
            }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(react_1.Fragment, { children: [onUpdateData && ((0, jsx_runtime_1.jsx)(PrimaryToolbar_1.PrimaryToolbar, __assign({}, (onSelect &&
                pagination && {
                bulkSelect: __assign({ count: selected === null || selected === void 0 ? void 0 : selected.length, onSelect: function (isSelected) {
                        if (isSelected) {
                            onSelect(unique === null || unique === void 0 ? void 0 : unique(__spreadArray(__spreadArray([], rows, true), selected, true)));
                        }
                        else {
                            onSelect(selected.filter(function (_a) {
                                var id = _a.id;
                                return !rows.find(function (_a) {
                                    var rowId = _a.id;
                                    return rowId === id;
                                });
                            }));
                        }
                    }, checked: loaded && (calculateChecked === null || calculateChecked === void 0 ? void 0 : calculateChecked(rows, selected)), items: [
                        {
                            title: 'Select none (0)',
                            onClick: function () { return onSelect([]); },
                        },
                        __assign({}, (loaded && (rows === null || rows === void 0 ? void 0 : rows.length) > 0
                            ? {
                                title: "Select page (".concat(rows.length, ")"),
                                onClick: function () { return onSelect(unique === null || unique === void 0 ? void 0 : unique(__spreadArray(__spreadArray([], rows, true), selected, true))); },
                            }
                            : {})),
                    ] }, (bulkSelect || {})),
            }), (filters && {
                filterConfig: {
                    items: filters,
                },
            }), { pagination: loaded ? (__assign(__assign({}, (pagination || {})), { itemCount: pagination === null || pagination === void 0 ? void 0 : pagination.count, onSetPage: function (_e, page) { return onUpdateData(__assign(__assign({}, pagination), { page: page })); }, onPerPageSelect: function (_e, perPage) { return onUpdateData(__assign(__assign({}, pagination), { page: 1, perPage: perPage })); } })) : ((0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { size: "lg" })) }, primaryToolbarProps))), children, loaded ? ((0, jsx_runtime_1.jsxs)(react_table_1.Table, __assign({ "aria-label": title || "".concat(systemName, " ").concat(entityName), variant: "compact", className: "ins-c-tag-modal__table", cells: columns, rows: (rows === null || rows === void 0 ? void 0 : rows.length)
                    ? rows
                    : [
                        {
                            cells: [
                                {
                                    title: ((0, jsx_runtime_1.jsx)(EmptyTable_1.EmptyTable, { children: (0, jsx_runtime_1.jsx)(react_core_1.Bullseye, { children: (0, jsx_runtime_1.jsxs)(react_core_1.EmptyState, __assign({ variant: react_core_1.EmptyStateVariant.full }, { children: [(0, jsx_runtime_1.jsxs)(react_core_1.Title, __assign({ headingLevel: "h5", size: "lg" }, { children: ["No ", entityName, " found"] })), (0, jsx_runtime_1.jsxs)(react_core_1.EmptyStateBody, { children: ["This filter criteria matches no ", entityName, ". ", (0, jsx_runtime_1.jsx)("br", {}), " Try changing your filter settings."] })] })) }) })),
                                    props: {
                                        colSpan: columns.length,
                                    },
                                },
                            ],
                        },
                    ] }, (onSelect &&
                (rows === null || rows === void 0 ? void 0 : rows.length) && {
                onSelect: function (_event, isSelected, rowId) { return onRowSelect({ isSelected: isSelected, rowId: rowId }); },
            }), tableProps, { children: [(0, jsx_runtime_1.jsx)(react_table_1.TableHeader, {}), (0, jsx_runtime_1.jsx)(react_table_1.TableBody, {})] }))) : ((0, jsx_runtime_1.jsx)(SkeletonTable_1.SkeletonTable, { columns: columns, rowSize: (pagination === null || pagination === void 0 ? void 0 : pagination.perPage) || 10 })), onUpdateData && pagination && loaded && ((0, jsx_runtime_1.jsx)(TableToolbar_1.TableToolbar, __assign({ isFooter: true, className: "ins-c-inventory__table--toolbar" }, { children: (0, jsx_runtime_1.jsx)(react_core_1.Pagination, { itemCount: pagination === null || pagination === void 0 ? void 0 : pagination.count, perPage: pagination === null || pagination === void 0 ? void 0 : pagination.perPage, page: (pagination === null || pagination === void 0 ? void 0 : pagination.page) || 0, variant: "bottom", onSetPage: function (_event, page) { return onUpdateData(__assign(__assign({}, pagination), { page: page })); }, onPerPageSelect: function (_event, perPage) { return onUpdateData(__assign(__assign({}, pagination), { page: 1, perPage: perPage })); } }) })))] }));
};
exports.default = TableWithFilter;
//# sourceMappingURL=TableWithFilter.js.map
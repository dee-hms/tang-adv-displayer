import React, { ChangeEvent } from 'react';
import { Group, GroupFilterItem, GroupItem, TreeViewItem } from './GroupFilter';
import { GroupType } from './groupType';
export declare const isChecked: (groupValue: string, itemValue: string | number, id: string | undefined, tagValue: string | undefined, stateSelected: Record<string, Record<string, boolean | GroupItem>>, propSelected: Record<string, Record<string, boolean | GroupItem>>) => boolean;
export declare type FilterMenuItemOnChange = (event: React.FormEvent | React.MouseEventHandler, selected: unknown, selectedItem: {
    value: string;
    label: string | Node;
    id: string;
    type: unknown;
    items: GroupFilterItem[];
}, item: {
    id?: string;
    value?: string;
}, value: string, itemValue: string) => void;
export declare const getMenuItems: (items: GroupFilterItem[], onChange: FilterMenuItemOnChange | undefined, calculateSelected: (type?: GroupType, groupKey?: string, value?: TreeViewItem | string, checked?: boolean) => Record<string, Record<string, boolean | GroupItem>>, groupType?: GroupType, groupValue?: string, groupLabel?: string, groupId?: string, group?: Group) => {
    className: string;
    key: string | number;
    value: string;
    onClick: (event: React.FormEvent | React.MouseEventHandler, treeViewItem?: TreeViewItem, checked?: boolean) => void;
    id?: string | undefined;
    isChecked?: boolean | undefined;
    label?: string | Node | undefined;
    name?: string | undefined;
    noFilter?: boolean | undefined;
    onChange?: ((value: boolean, event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    tagKey?: string | undefined;
    tagValue?: string | undefined;
    type?: GroupType | undefined;
    variant?: import("@patternfly/react-core").ButtonVariant | undefined;
}[];
export declare const convertTreeItem: (item: TreeViewItem) => TreeViewItem;
export declare const getGroupMenuItems: (groups: Group[], onChange: FilterMenuItemOnChange | undefined, calculateSelected: (type?: GroupType, groupKey?: string, value?: TreeViewItem | string, checked?: boolean) => Record<string, Record<string, boolean | GroupItem>>) => {
    label: string | undefined;
    noFilter: boolean | undefined;
    value: string | undefined;
    type: GroupType | undefined;
    groupSelectable: boolean | undefined;
    items: {
        className: string;
        key: string | number;
        value: string;
        onClick: (event: React.FormEvent | React.MouseEventHandler, treeViewItem?: TreeViewItem, checked?: boolean) => void;
        id?: string | undefined;
        isChecked?: boolean | undefined;
        label?: string | Node | undefined;
        name?: string | undefined;
        noFilter?: boolean | undefined;
        onChange?: ((value: boolean, event: React.FormEvent<HTMLInputElement>) => void) | undefined;
        tagKey?: string | undefined;
        tagValue?: string | undefined;
        type?: GroupType | undefined;
        variant?: import("@patternfly/react-core").ButtonVariant | undefined;
    }[];
}[];
export declare const calculateSelected: (selectedTags: Record<string, Record<string, GroupItem | boolean>>) => (type?: string, groupKey?: string, value?: TreeViewItem | string, checked?: boolean) => Record<string, Record<string, boolean | GroupItem>>;
export declare const mapTree: (item: TreeViewItem, groupKey: string, stateSelected: Record<string, Record<string, boolean | GroupItem>>, selected: Record<string, Record<string, boolean | GroupItem>>) => TreeViewItem;
export declare const onTreeCheck: (e: ChangeEvent, treeViewItem: TreeViewItem, tree: TreeViewItem[]) => void | undefined;

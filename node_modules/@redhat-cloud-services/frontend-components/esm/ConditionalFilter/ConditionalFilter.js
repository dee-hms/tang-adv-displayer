var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment, useEffect, useRef, useState } from 'react';
import classNames from 'classnames';
import globalBreakpointMd from '@patternfly/react-tokens/dist/js/global_breakpoint_md';
import { Dropdown, DropdownItem, DropdownToggle, Split, SplitItem, ToolbarGroup, ToolbarItem, ToolbarToggleGroup } from '@patternfly/react-core';
import { FilterIcon } from '@patternfly/react-icons';
import TextFilter from './TextFilter';
import { conditionalFilterType, typeMapper } from './conditionalFilterConstants';
import '../ConditionalFilter/conditional-filter.css';
var ConditionalFilter = function (_a) {
    var _b = _a.hideLabel, hideLabel = _b === void 0 ? false : _b, _c = _a.id, id = _c === void 0 ? 'default-input' : _c, _d = _a.isDisabled, isDisabled = _d === void 0 ? false : _d, _f = _a.items, items = _f === void 0 ? [] : _f, onChange = _a.onChange, placeholder = _a.placeholder, _g = _a.useMobileLayout, useMobileLayout = _g === void 0 ? false : _g, _h = _a.value, value = _h === void 0 ? '' : _h, innerRef = _a.innerRef;
    var breakpointConstant = parseInt(globalBreakpointMd.value.replace('px', ''));
    var updateFilterViewport = function (width) { return width <= breakpointConstant; };
    var _j = useState(false), isOpen = _j[0], setIsOpen = _j[1];
    var _k = useState(), stateValue = _k[0], setStateValue = _k[1];
    var _l = useState(updateFilterViewport(window.innerWidth)), isMobile = _l[0], setIsMobile = _l[1];
    var resizeListener = useRef(function (event) {
        setIsMobile(updateFilterViewport((event === null || event === void 0 ? void 0 : event.target).innerWidth));
    });
    useEffect(function () {
        useMobileLayout ||
            console.warn("The prop \"useMobileLayout\" is set to false. You are using an outdated mobile layout of conditional filter.\n    Please switch to new layout by adding \"useMobileLayout={true}\" prop to the PrimaryToolbar or ConditionalFilter directly.\n    The new mobile layout will become the default in next minor release.");
        window.addEventListener('resize', resizeListener.current);
        return function () {
            resizeListener.current && window.removeEventListener('resize', resizeListener.current);
        };
    }, []);
    var currentValue = onChange ? value : stateValue;
    var activeItem = items && items.length && (items.find(function (item, key) { return item.value === currentValue || key === Number(currentValue); }) || items[0]);
    var onChangeDefault = function (_e, value) { return setStateValue(value); };
    var onChangeCallback = onChange || onChangeDefault;
    var shouldRenderNewLayout = useMobileLayout && isMobile;
    var capitalize = function (string) { return string[0].toUpperCase() + string.substring(1); };
    var ActiveComponent = activeItem && (typeMapper[activeItem.type] || typeMapper.text);
    var Wrapper = useMobileLayout && isMobile
        ? function (props) { return _jsx(ToolbarToggleGroup, __assign({}, props, { breakpoint: "md", toggleIcon: _jsx(FilterIcon, {}) })); }
        : Fragment;
    return (_jsxs(Wrapper, { children: [useMobileLayout && isMobile && (_jsx(ToolbarGroup, __assign({ className: "ins-c-conditional-filter mobile" }, { children: items.map(function (activeItem, key) {
                    var ActiveComponent = activeItem && (typeMapper[activeItem.type] || typeMapper.text);
                    return (_jsx(ToolbarItem, { children: _jsx(ActiveComponent, __assign({}, (activeItem.type !== conditionalFilterType.custom && {
                            placeholder: placeholder || activeItem.placeholder || "Filter by ".concat(activeItem.label),
                            id: activeItem.filterValues ? activeItem.filterValues.id : currentValue ? String(currentValue) : undefined,
                            innerRef: innerRef,
                        }), activeItem.filterValues)) }, key));
                }) }))), !shouldRenderNewLayout && (_jsx(Fragment, { children: !items || (items && items.length <= 0) ? (_jsx("div", __assign({ className: classNames('ins-c-conditional-filter', {
                        desktop: useMobileLayout,
                    }) }, { children: _jsx(TextFilter, { innerRef: innerRef, id: id, isDisabled: isDisabled, onChange: function (e) { return onChangeCallback(e, e.target.value); }, placeholder: placeholder, value: currentValue ? String(currentValue) : undefined, "widget-type": "InsightsInput" }) }))) : (_jsxs(Split, __assign({ className: classNames('ins-c-conditional-filter', {
                        desktop: useMobileLayout,
                    }) }, { children: [items.length > 1 && (_jsx(SplitItem, { children: _jsx(Dropdown, { ref: innerRef, className: "ins-c-conditional-filter__group", onSelect: function () { return setIsOpen(false); }, isOpen: isOpen, ouiaId: "ConditionalFilter", toggle: _jsxs(DropdownToggle, __assign({ "aria-label": "Conditional filter", onToggle: setIsOpen, isDisabled: isDisabled, className: hideLabel ? 'ins-c-conditional-filter__no-label' : '', ouiaId: "ConditionalFilter" }, { children: [_jsx(FilterIcon, { size: "sm" }), !hideLabel && (_jsx("span", __assign({ className: "ins-c-conditional-filter__value-selector" }, { children: activeItem && capitalize(String(activeItem.label)) })))] })), dropdownItems: items.map(function (item, key) { return (_jsx(DropdownItem, __assign({ component: "button", ouiaId: String(item.label), onClick: function (e) { return onChangeCallback(e, item.value || key); }, isHovered: activeItem.label === item.label }, { children: capitalize(String(item.label)) }), item.id ? "".concat(item.id, "-dropdown") : key)); }) }) })), ActiveComponent && (_jsx(SplitItem, __assign({ isFilled: true }, { children: _jsx(ActiveComponent, __assign({}, (activeItem.type !== conditionalFilterType.custom && {
                                placeholder: placeholder || activeItem.placeholder || "Filter by ".concat(activeItem.label),
                                id: (activeItem.filterValues && activeItem.filterValues.id) || currentValue ? String(currentValue) : undefined,
                            }), activeItem.filterValues)) })))] }))) }))] }));
};
export default ConditionalFilter;
//# sourceMappingURL=ConditionalFilter.js.map
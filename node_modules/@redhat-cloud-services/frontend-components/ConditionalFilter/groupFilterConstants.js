"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onTreeCheck = exports.mapTree = exports.calculateSelected = exports.getGroupMenuItems = exports.convertTreeItem = exports.getMenuItems = exports.isChecked = void 0;
var groupType_1 = __importDefault(require("./groupType"));
function isGroup(item) {
    return (item === null || item === void 0 ? void 0 : item.group) !== undefined;
}
var isChecked = function (groupValue, itemValue, id, tagValue, stateSelected, propSelected) {
    var _a, _b, _c, _d;
    var selected = __assign(__assign({}, propSelected), stateSelected);
    if (typeof selected[groupValue] === 'undefined') {
        return false;
    }
    if (isGroup(selected[groupValue][itemValue])) {
        var group = selected[groupValue][itemValue];
        if (group.isSelected) {
            if ((_a = group === null || group === void 0 ? void 0 : group.item) === null || _a === void 0 ? void 0 : _a.id) {
                return id === ((_b = group === null || group === void 0 ? void 0 : group.item) === null || _b === void 0 ? void 0 : _b.id);
            }
            else if ((_c = group === null || group === void 0 ? void 0 : group.item) === null || _c === void 0 ? void 0 : _c.tagValue) {
                return tagValue === ((_d = group === null || group === void 0 ? void 0 : group.item) === null || _d === void 0 ? void 0 : _d.tagValue);
            }
        }
        return Boolean(group.isSelected);
    }
    return Boolean(selected[groupValue][itemValue]);
};
exports.isChecked = isChecked;
var getMenuItems = function (items, onChange, calculateSelected, groupType, groupValue, groupLabel, groupId, group) {
    if (groupValue === void 0) { groupValue = ''; }
    var result = (items === null || items === void 0 ? void 0 : items.map(function (item, index) { return (__assign(__assign({}, item), { className: "".concat((item === null || item === void 0 ? void 0 : item.className) || 'pf-u-pl-sm'), key: item.id || item.value || index, value: String(item.value || item.id || index), onClick: function (event, treeViewItem, checked) {
            var _a;
            var params = [
                event,
                calculateSelected(groupType || item.type, groupValue, (groupType || item.type) === groupType_1.default.treeView ? treeViewItem : item.value, checked),
                __assign({ value: groupValue, label: (groupLabel || item.label), id: (groupId || item.id), type: groupType || item.type, items: items }, (group || item)),
                item,
                groupValue,
                item.value,
            ];
            onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, params);
            (_a = item === null || item === void 0 ? void 0 : item.onClick) === null || _a === void 0 ? void 0 : _a.call(item, event, __assign(__assign({}, item), { label: typeof item.label === 'string' ? item.label : '' }), undefined, checked);
        } })); })) || [];
    return result.filter(function (_a) {
        var noFilter = _a.noFilter;
        return !noFilter;
    });
};
exports.getMenuItems = getMenuItems;
var convertTreeItem = function (item) {
    item.id = item.id || item.value;
    item.name = item.label || item.name;
    item.value = item.id;
    item.label = item.name || '';
    return item.children
        ? __assign(__assign({}, item), { children: item.children.map(function (child) { return (0, exports.convertTreeItem)(child); }) }) : item;
};
exports.convertTreeItem = convertTreeItem;
var getGroupMenuItems = function (groups, onChange, calculateSelected) {
    var result = groups.map(function (group) {
        var value = group.value, label = group.label, groupSelectable = group.groupSelectable, id = group.id, type = group.type, items = group.items, noFilter = group.noFilter;
        var converted = type === groupType_1.default.treeView ? items.map(function (item) { return (0, exports.convertTreeItem)(item); }) : items;
        return {
            label: label,
            noFilter: noFilter,
            value: value,
            type: type,
            groupSelectable: groupSelectable,
            items: (0, exports.getMenuItems)(__spreadArray(__spreadArray([], (groupSelectable
                ? [
                    __assign({ value: value || '', label: label || '', id: id || '', type: type, className: 'pf-u-pl-xs' }, group),
                ]
                : []), true), converted, true), onChange, calculateSelected, type, value, label, id, group),
        };
    });
    return result.filter(function (_a) {
        var noFilter = _a.noFilter, _b = _a.items, items = _b === void 0 ? [] : _b;
        return !noFilter || items.length > 0;
    });
};
exports.getGroupMenuItems = getGroupMenuItems;
var calculateSelected = function (selectedTags) {
    return function (type, groupKey, value, checked) {
        if (type === void 0) { type = groupType_1.default.button; }
        if (groupKey === void 0) { groupKey = ''; }
        if (value === void 0) { value = ''; }
        if (checked === void 0) { checked = false; }
        var activeGroup = selectedTags === null || selectedTags === void 0 ? void 0 : selectedTags[groupKey];
        var children = type === groupType_1.default.treeView
            ? [value].reduce(function iter(acc, curr) {
                if (Array.isArray(curr === null || curr === void 0 ? void 0 : curr.children)) {
                    return curr.children.reduce(iter, acc) || [];
                }
                acc.push(curr);
                return acc;
            }, [])
            : [];
        var itemKeys = type === groupType_1.default.treeView ? children.map(function (item) { return item.id; }) : [String(value)];
        if (activeGroup) {
            var result_1 = selectedTags;
            itemKeys.map(function (itemKey) {
                var _a, _b, _c, _d;
                if (itemKey === void 0) { itemKey = ''; }
                var activeGroup = result_1[groupKey];
                if (type !== groupType_1.default.radio &&
                    (activeGroup[itemKey] instanceof Object ? activeGroup[itemKey].isSelected : Boolean(activeGroup[itemKey]))) {
                    result_1 = __assign(__assign({}, result_1), (_a = {}, _a[groupKey] = __assign(__assign({}, (activeGroup || {})), (_b = {}, _b[itemKey] = type === groupType_1.default.treeView && checked, _b)), _a));
                }
                else {
                    result_1 = __assign(__assign({}, result_1), (_c = {}, _c[groupKey] = __assign(__assign({}, (type !== groupType_1.default.radio ? activeGroup || {} : {})), (_d = {}, _d[itemKey] = true, _d)), _c));
                }
            });
            return result_1;
        }
        return itemKeys.reduce(function (acc, curr) {
            var _a, _b;
            return (__assign(__assign({}, acc), (_a = {}, _a[groupKey] = __assign(__assign({}, acc === null || acc === void 0 ? void 0 : acc[groupKey]), (_b = {}, _b[curr || ''] = true, _b)), _a)));
        }, selectedTags);
    };
};
exports.calculateSelected = calculateSelected;
var areAllChildrenChecked = function (dataItem, groupKey, stateSelected, selected) {
    return dataItem.children
        ? dataItem.children.every(function (child) { return areAllChildrenChecked(child, groupKey, stateSelected, selected); })
        : (0, exports.isChecked)(groupKey, dataItem.id || '', undefined, undefined, stateSelected, selected);
};
var areSomeChildrenChecked = function (dataItem, groupKey, stateSelected, selected) {
    return dataItem.children
        ? dataItem.children.some(function (child) { return areSomeChildrenChecked(child, groupKey, stateSelected, selected); })
        : (0, exports.isChecked)(groupKey, dataItem.id || '', undefined, undefined, stateSelected, selected);
};
var mapTree = function (item, groupKey, stateSelected, selected) {
    var hasCheck = areAllChildrenChecked(item, groupKey, stateSelected, selected);
    item.checkProps = { checked: false };
    if (hasCheck) {
        item.checkProps.checked = true;
    }
    else {
        var hasPartialCheck = areSomeChildrenChecked(item, groupKey, stateSelected, selected);
        if (hasPartialCheck) {
            item.checkProps = { checked: null };
        }
    }
    if (item.children) {
        return __assign(__assign({}, item), { children: item.children.map(function (child) { return (0, exports.mapTree)(child, groupKey, stateSelected, selected); }) });
    }
    return item;
};
exports.mapTree = mapTree;
var onTreeCheck = function (e, treeViewItem, tree) { var _a, _b, _c; return (_b = (_a = tree[0]).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e, treeViewItem, undefined, (_c = e === null || e === void 0 ? void 0 : e.target) === null || _c === void 0 ? void 0 : _c.checked); };
exports.onTreeCheck = onTreeCheck;
//# sourceMappingURL=groupFilterConstants.js.map
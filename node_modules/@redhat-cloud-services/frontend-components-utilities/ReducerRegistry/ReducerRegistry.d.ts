import { ActionCreator, Middleware, Reducer, Store, compose } from 'redux';
export declare function applyReducerHash(reducerHash: any, initialState?: Record<string, unknown>): (state: Record<string, unknown> | undefined, action: {
    type: PropertyKey;
}) => any;
export declare function dispatchActionsToStore<T extends Record<string, ActionCreator<any>>>(actions: Record<string, ActionCreator<any>>, store: Store): T;
declare global {
    interface Window {
        REDUX_DEVTOOLS_EXTENSION_COMPOSE?: typeof compose;
    }
}
export declare class ReducerRegistry<T extends Record<string, any>> {
    store: Store;
    reducers: Record<string, Reducer>;
    constructor(initState?: T, middlewares?: Middleware[], composeEnhancersDefault?: typeof compose);
    getStore(): Store<T>;
    register(newReducers: Record<string, Reducer>): () => void;
}
export declare const reduxRegistry: ReducerRegistry<Record<string, any>>;
export default ReducerRegistry;

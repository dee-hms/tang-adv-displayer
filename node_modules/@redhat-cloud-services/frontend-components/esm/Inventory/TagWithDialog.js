var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import React, { Suspense } from 'react';
import { ScalprumComponent } from '@scalprum/react-core';
import { useHistory } from 'react-router-dom';
import { useStore } from 'react-redux';
import { Bullseye, Spinner } from '@patternfly/react-core';
import InventoryLoadError from './InventoryLoadError';
import classNames from 'classnames';
var BaseTagWithDialog = function (props) {
    var history = useHistory();
    var store = useStore();
    var Cmp = props.component;
    var SCProps = __assign({ history: history, store: store, appName: 'inventory', module: './TagWithDialog', scope: 'inventory', ErrorComponent: _jsx(InventoryLoadError, __assign({ component: "InventoryDetailHead" }, props)), ref: props.innerRef }, props);
    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({}, SCProps)) })) })));
};
var TagWithDialog = React.forwardRef(function (_a, ref) {
    var _b = _a.component, component = _b === void 0 ? 'section' : _b, _c = _a.fallback, fallback = _c === void 0 ? (_jsx(Bullseye, __assign({ className: "pf-u-p-lg" }, { children: _jsx(Spinner, { size: "xl" }) }))) : _c, props = __rest(_a, ["component", "fallback"]);
    return _jsx(BaseTagWithDialog, __assign({ innerRef: ref, component: component, fallback: fallback }, props));
});
export default TagWithDialog;
//# sourceMappingURL=TagWithDialog.js.map
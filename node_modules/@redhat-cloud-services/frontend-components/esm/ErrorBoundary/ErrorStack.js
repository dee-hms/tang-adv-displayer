var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Text } from '@patternfly/react-core';
var errorStackClass = 'ins-error-boundary-stack';
var ErrorStack = function (_a) {
    var error = _a.error;
    if (error.stack) {
        return (_jsx(Text, __assign({ className: errorStackClass }, { children: error.stack.split('\n').map(function (line) { return (_jsx("div", { children: line }, line)); }) })));
    }
    if (error.name && error.message) {
        return (_jsxs(_Fragment, { children: [_jsx(Text, __assign({ component: "h6" }, { children: error.name })), _jsx(Text, __assign({ className: errorStackClass, component: "blockquote" }, { children: error.message }))] }));
    }
    return (_jsx(Text, __assign({ className: errorStackClass, component: "blockquote" }, { children: error.toString() })));
};
export default ErrorStack;
//# sourceMappingURL=ErrorStack.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("@cypress/react");
var __1 = require("..");
describe('Actions component', function () {
    var config = {
        actions: [
            {
                label: 'Foo',
                props: {
                    key: 'obj1',
                },
            },
            {
                label: 'Bar',
                props: {
                    key: 'obj2',
                },
            },
            'Baz',
        ],
        overflowActions: [
            'Qux',
            {
                label: 'Waldo',
                props: {
                    key: 'obj2',
                },
            },
        ],
    };
    it('empty component is not rendered', function () {
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(__1.Actions, {}));
        cy.get('.ins-c-primary-toolbar__actions').should('not.exist');
    });
    it('renders component with data', function () {
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(__1.Actions, __assign({}, config)));
        cy.get('.ins-c-primary-toolbar__actions');
        cy.get('.pf-c-dropdown__toggle').click();
        cy.get('.pf-c-dropdown__menu').find('>li>button').should('have.length', 5);
    });
    it('functions called on click', function () {
        config.actions[0].onClick = cy.spy().as('firstActionSpy');
        config.actions[1].onClick = cy.spy().as('restActionsSpy');
        config.overflowActions[1].onClick = cy.spy().as('ofActionSpy');
        (0, react_1.mount)((0, jsx_runtime_1.jsx)(__1.Actions, __assign({}, config)));
        cy.get('.pf-c-button').click();
        cy.get('.pf-c-dropdown__toggle').click();
        cy.get('.pf-c-dropdown__menu').find('>li>button').eq(1).click();
        cy.get('.pf-c-dropdown__toggle').click();
        cy.get('.pf-c-dropdown__menu').find('>li>button').eq(4).click();
        cy.get('@firstActionSpy').should('have.been.called');
        cy.get('@restActionsSpy').should('have.been.called');
        cy.get('@ofActionSpy').should('have.been.called');
    });
});
//# sourceMappingURL=Actions.spec.ct.js.map
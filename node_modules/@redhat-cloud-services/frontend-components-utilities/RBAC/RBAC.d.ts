/// <reference types="react" />
import { Access } from '@redhat-cloud-services/rbac-client';
import type { ChromeAPI } from '@redhat-cloud-services/types';
declare global {
    interface Window {
        insights: {
            chrome: ChromeAPI;
        };
    }
}
export interface RBAC {
    isOrgAdmin: boolean;
    permissions: Access[];
}
export declare function getRBAC(applicationName?: string, disableCache?: boolean): Promise<RBAC>;
export declare function doesHavePermissions(userPermissions: (Access | string)[], permissionList: (Access | string)[]): boolean;
export declare function hasAllPermissions(userPermissions: (Access | string)[], permissionList: (Access | string)[]): boolean;
export interface UsePermissionsState extends RBAC {
    isLoading: boolean;
    hasAccess?: boolean;
}
export interface UsePermissionsContextState {
    isLoading?: boolean;
    isOrgAdmin: boolean;
    permissions: (string | Access)[];
    hasAccess?: (requiredPermissions: string[], checkAll?: boolean) => boolean;
}
export declare const initialPermissions: UsePermissionsContextState;
export declare const RBACContext: import("react").Context<UsePermissionsContextState>;
export default getRBAC;

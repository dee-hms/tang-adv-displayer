var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';
function generateID(type) {
    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);
}
export var addNotification = function (notification) { return ({
    type: ADD_NOTIFICATION,
    payload: __assign({ id: generateID('notification') }, notification),
}); };
export var removeNotification = function (index) { return ({
    type: REMOVE_NOTIFICATION,
    payload: index,
}); };
export var clearNotifications = function () { return ({
    type: CLEAR_NOTIFICATIONS,
}); };
export default {
    addNotification: addNotification,
    removeNotification: removeNotification,
    clearNotifications: clearNotifications,
};
//# sourceMappingURL=notifications.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { mount } from '@cypress/react';
import { PrimaryToolbar } from '..';
import { Button } from '@patternfly/react-core';
describe('PrimaryToolbar component', function () {
    var groupConfig = {
        expandAll: {
            asAllExpanded: false,
            isDisabled: false,
        },
        bulkSelect: {
            items: [
                {
                    title: 'Foo',
                },
                {
                    title: 'Bar',
                },
            ],
            checked: false,
        },
        filterConfig: {
            items: [
                {
                    label: 'Baz',
                    type: 'radio',
                    filterValues: {
                        items: [
                            {
                                label: 'One',
                            },
                            {
                                label: 'Two',
                            },
                        ],
                    },
                },
                {
                    label: 'Waldo',
                },
            ],
        },
        dedicatedAction: _jsx("button", __assign({ type: "button" }, { children: "Qux" })),
    };
    var otherConfig = {
        actionsConfig: {
            actions: [_jsx(Button, { children: "Bar" }, "btn")],
            dropdownProps: { className: 'ddClass' },
        },
        sortByConfig: {
            direction: 'asc',
        },
        pagination: {
            itemCount: 100,
            page: 1,
            perPage: 15,
        },
        activeFiltersConfig: {
            filters: [
                {
                    name: 'Filter1',
                },
            ],
        },
    };
    it('renders empty toolbar with class and id', function () {
        mount(_jsx(PrimaryToolbar, { id: "myToolbar", className: "tbPrimary" }));
        cy.get('.ins-c-primary-toolbar').should('have.id', 'myToolbar').should('have.class', 'tbPrimary');
    });
    it('renders items correctly - only one item', function () {
        mount(_jsx(PrimaryToolbar, { filterConfig: groupConfig.filterConfig }));
        cy.get('.pf-c-toolbar__group').get('.ins-c-primary-toolbar__filter');
    });
    it('renders items correctly - only group', function () {
        mount(_jsx(PrimaryToolbar, __assign({}, groupConfig)));
        cy.get('.pf-c-toolbar__group').children().should('have.length', 4);
    });
    it('renders items correctly - only items outside of the group', function () {
        mount(_jsx(PrimaryToolbar, __assign({}, otherConfig)));
        cy.get('.pf-c-toolbar__content-section').children().should('have.length', 5);
    });
    it('renders items correctly - everything', function () {
        mount(_jsx(PrimaryToolbar, __assign({}, groupConfig, otherConfig)));
        cy.get('.pf-c-toolbar__content-section')
            .within(function () {
            cy.get('.pf-c-toolbar__group').children().should('have.length', 4);
        })
            .children()
            .should('have.length', 6);
    });
    it('responds to interaction with individual items', function () {
        groupConfig.expandAll.onClick = cy.spy().as('eaSpy');
        groupConfig.bulkSelect.items[1].onClick = cy.spy().as('bsSpy');
        otherConfig.activeFiltersConfig.onDelete = cy.spy().as('afSpy');
        mount(_jsx(PrimaryToolbar, __assign({}, groupConfig, otherConfig)));
        cy.get('[data-ouia-component-id="ExpandCollapseAll"]').click();
        cy.get('button[data-ouia-component-id="BulkSelect"]').click();
        cy.get(':nth-child(2) > .pf-c-dropdown__menu-item').click();
        cy.get('[data-ouia-component-id="ClearFilters"]').click();
        cy.get('@eaSpy').should('have.been.called');
        cy.get('@bsSpy').should('have.been.called');
        cy.get('@afSpy').should('have.been.called');
    });
});
//# sourceMappingURL=PrimaryToolbar.spec.ct.js.map
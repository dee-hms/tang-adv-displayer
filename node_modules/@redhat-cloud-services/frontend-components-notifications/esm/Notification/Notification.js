var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useRef } from 'react';
import { Alert, AlertActionCloseButton, Text, TextContent, TextVariants } from '@patternfly/react-core';
import { CloseIcon } from '@patternfly/react-icons';
import '../Notification/notification.css';
var DEFAULT_DELAY = 8000;
var Notification = function (_a) {
    var description = _a.description, _b = _a.dismissable, dismissable = _b === void 0 ? true : _b, onDismiss = _a.onDismiss, _c = _a.dismissDelay, dismissDelay = _c === void 0 ? DEFAULT_DELAY : _c, title = _a.title, sentryId = _a.sentryId, requestId = _a.requestId, _d = _a.autoDismiss, autoDismiss = _d === void 0 ? true : _d, id = _a.id, rest = __rest(_a, ["description", "dismissable", "onDismiss", "dismissDelay", "title", "sentryId", "requestId", "autoDismiss", "id"]);
    var dismissTimeout = useRef();
    var handleDismiss = function () {
        onDismiss(id);
    };
    var setDismissTimeout = function () {
        if (autoDismiss) {
            dismissTimeout.current = setTimeout(function () { return handleDismiss(); }, dismissDelay);
        }
    };
    var clearDismissTimeout = function () {
        if (dismissTimeout.current) {
            clearTimeout(dismissTimeout.current);
        }
    };
    useEffect(function () {
        setDismissTimeout();
        return function () {
            clearDismissTimeout();
        };
    }, []);
    return (React.createElement(Alert, __assign({ className: "notification-item", id: "".concat(id), title: typeof title === 'string' ? title.replace(/<\/?[^>]+(>|$)/g, '') : title }, rest, { actionClose: dismissable ? (React.createElement(AlertActionCloseButton, { "aria-label": "close-notification", variant: "plain", onClick: handleDismiss },
            React.createElement(CloseIcon, null))) : null, onMouseEnter: clearDismissTimeout, onMouseLeave: setDismissTimeout }),
        typeof description === 'string' ? description.replace(/<\/?[^>]+(>|$)/g, '') : description,
        sentryId && (React.createElement(TextContent, null,
            React.createElement(Text, { component: TextVariants.small },
                "Tracking Id: ",
                sentryId))),
        requestId && (React.createElement(TextContent, null,
            React.createElement(Text, { component: TextVariants.small },
                "Request Id: ",
                requestId)))));
};
export default Notification;
//# sourceMappingURL=Notification.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Badge, Button, Chip, ChipGroup } from '@patternfly/react-core';
import classNames from 'classnames';
import '../FilterChips/filter-chips.css';
function isFilterChipGroup(group) {
    return Object.prototype.hasOwnProperty.call(group, 'category');
}
function isPlainFilterChip(group) {
    return !isFilterChipGroup(group);
}
var FilterChips = function (_a) {
    var className = _a.className, _b = _a.filters, filters = _b === void 0 ? [] : _b, _c = _a.onDelete, onDelete = _c === void 0 ? function () { return undefined; } : _c, _d = _a.deleteTitle, deleteTitle = _d === void 0 ? 'Clear filters' : _d, showDeleteButton = _a.showDeleteButton, onDeleteGroup = _a.onDeleteGroup;
    var groups = filters.filter(isFilterChipGroup);
    var groupedFilters = groups.map(function (group, groupKey) { return (_jsx(ChipGroup, __assign({ categoryName: String(group.category) || ' ' }, (onDeleteGroup && {
        isClosable: true,
        onClick: function (event) {
            event.stopPropagation();
            onDeleteGroup(event, [group], groups.filter(function (_item, key) { return key !== groupKey; }));
        },
    }), { children: group.chips.map(function (chip) { return (_jsxs(Chip, __assign({ onClick: function (event) {
                event.stopPropagation();
                onDelete(event, [__assign(__assign({}, group), { chips: [chip] })]);
            } }, { children: [chip.name, chip.count && (_jsx(Badge, __assign({ isRead: chip.isRead }, { children: chip.count }), "chip_badge_".concat(chip.id)))] }), chip.name)); }) }), "group_".concat(group.category))); });
    var plainFilters = filters.filter(isPlainFilterChip);
    return (_jsxs("span", __assign({ className: classNames(className, 'ins-c-chip-filters') }, { children: [groupedFilters, plainFilters &&
                plainFilters.map(function (chip) { return (_jsx(ChipGroup, { children: _jsxs(Chip, __assign({ onClick: function (event) {
                            event.stopPropagation();
                            onDelete(event, [chip]);
                        } }, { children: [chip.name, chip.count && (_jsx(Badge, __assign({ isRead: chip.isRead }, { children: chip.count }), "chip_badge_".concat(chip.id)))] })) }, "group_plain_chip_".concat(chip.name))); }), (showDeleteButton === true || (showDeleteButton === undefined && filters.length > 0)) && (_jsx(Button, __assign({ variant: "link", ouiaId: "ClearFilters", onClick: function (event) { return onDelete(event, filters, true); } }, { children: deleteTitle })))] })));
};
export default FilterChips;
//# sourceMappingURL=FilterChips.js.map
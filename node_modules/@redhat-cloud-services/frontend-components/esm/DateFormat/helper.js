var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { Tooltip } from '@patternfly/react-core';
var second = 1000;
var minute = second * 60;
var hour = minute * 60;
var day = hour * 24;
var month = day * 30;
var year = day * 365;
var formatTime = function (number, unit) { return "".concat(number, " ").concat(number > 1 ? "".concat(unit, "s") : unit, " ago"); };
var relativeTimeTable = [
    { rightBound: Infinity, description: function (date) { return formatTime(Math.round(date / year), 'year'); } },
    { rightBound: year, description: function (date) { return formatTime(Math.round(date / month), 'month'); } },
    { rightBound: month, description: function (date) { return formatTime(Math.round(date / day), 'day'); } },
    { rightBound: day, description: function (date) { return formatTime(Math.round(date / hour), 'hour'); } },
    { rightBound: hour, description: function (date) { return formatTime(Math.round(date / minute), 'minute'); } },
    { rightBound: minute, description: function () { return 'Just now'; } },
];
var exact = function (value) { return value.toUTCString().split(',')[1].slice(0, -7).trim(); };
export var addTooltip = function (date, element, tooltipProps, extraTitle) {
    if (extraTitle === void 0) { extraTitle = ''; }
    return (_jsx(Tooltip, __assign({}, tooltipProps, { content: _jsxs("div", { children: [extraTitle, date] }) }, { children: element })));
};
export var dateStringByType = function (type) {
    return ({
        exact: function (date) { return exact(date) + ' UTC'; },
        onlyDate: function (date) { return exact(date).slice(0, -6); },
        relative: function (date) {
            return relativeTimeTable.reduce(function (acc, i) { return (i.rightBound > Date.now() - date.getTime() ? i.description(Date.now() - date.getTime()) : acc); }, exact(date));
        },
        invalid: function () { return 'Invalid date'; },
    }[type]);
};
export var dateByType = function (type, tooltipProps, extraTitle) {
    return ({
        exact: function (date) { return dateStringByType(type)(date); },
        onlyDate: function (date) { return dateStringByType(type)(date); },
        relative: function (date) { return addTooltip(dateStringByType('exact')(date), _jsx("span", { children: dateStringByType(type)(date) }), tooltipProps, extraTitle); },
        invalid: function () { return 'Invalid date'; },
    }[type]);
};
//# sourceMappingURL=helper.js.map
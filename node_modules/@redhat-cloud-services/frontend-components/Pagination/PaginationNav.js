"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_core_1 = require("@patternfly/react-core");
var react_icons_1 = require("@patternfly/react-icons");
var PaginationNav = function (_a) {
    var _b = _a.lastPage, lastPage = _b === void 0 ? 0 : _b, setPage = _a.setPage, _c = _a.pageTitle, pageTitle = _c === void 0 ? 'pages' : _c, amountOfPages = _a.amountOfPages, _d = _a.page, page = _d === void 0 ? 0 : _d, _e = _a.onFirstPage, onFirstPage = _e === void 0 ? function () { return undefined; } : _e, _f = _a.onLastPage, onLastPage = _f === void 0 ? function () { return undefined; } : _f, _g = _a.onPreviousPage, onPreviousPage = _g === void 0 ? function () { return undefined; } : _g, _h = _a.onNextPage, onNextPage = _h === void 0 ? function () { return undefined; } : _h, props = __rest(_a, ["lastPage", "setPage", "pageTitle", "amountOfPages", "page", "onFirstPage", "onLastPage", "onPreviousPage", "onNextPage"]);
    return ((0, jsx_runtime_1.jsxs)("nav", __assign({ className: "pf-c-pagination__nav", "aria-label": "Pagination" }, props, { children: [(0, jsx_runtime_1.jsx)(react_core_1.Button, __assign({ variant: react_core_1.ButtonVariant.plain, isDisabled: page === 1, "aria-label": "Go to first page", "data-action": "first-page", onClick: function (event) {
                    onFirstPage(event);
                    setPage(event, 1);
                } }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.AngleDoubleLeftIcon, {}) })), (0, jsx_runtime_1.jsx)(react_core_1.Button, __assign({ variant: react_core_1.ButtonVariant.plain, isDisabled: page === 1, "aria-label": "Go to previous page", "data-action": "previous-page", onClick: function (event) {
                    onPreviousPage(event, page - 1);
                    setPage(event, page - 1);
                } }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.AngleLeftIcon, {}) })), (0, jsx_runtime_1.jsxs)("div", __assign({ className: "pf-c-pagination__nav-page-select", "aria-label": "Current page ".concat(page, " of ").concat(lastPage) }, { children: [(0, jsx_runtime_1.jsx)(react_core_1.TextInput, { className: "pf-c-form-control", "aria-label": "Current page", type: "number", min: "1", "data-action": "set-page", max: amountOfPages, style: { width: "".concat(lastPage.toString().length, "rem"), minWidth: '3rem' }, isReadOnly: amountOfPages === 1, value: page, onChange: function (value, event) {
                            setPage(event, value === '' ? NaN : Number(value));
                        } }), (0, jsx_runtime_1.jsxs)("span", __assign({ "aria-hidden": "true" }, { children: ["of ", lastPage, " ", pageTitle] }))] })), (0, jsx_runtime_1.jsx)(react_core_1.Button, __assign({ variant: react_core_1.ButtonVariant.plain, isDisabled: page === lastPage, "aria-label": "Go to next page", "data-action": "next-page", onClick: function (event) {
                    onNextPage(event, page + 1);
                    setPage(event, page + 1);
                } }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.AngleRightIcon, {}) })), (0, jsx_runtime_1.jsx)(react_core_1.Button, __assign({ variant: react_core_1.ButtonVariant.plain, isDisabled: page === lastPage, "aria-label": "Go to last page", "data-action": "last-page", onClick: function (event) {
                    onLastPage(event);
                    setPage(event, lastPage);
                } }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.AngleDoubleRightIcon, {}) }))] })));
};
exports.default = PaginationNav;
//# sourceMappingURL=PaginationNav.js.map
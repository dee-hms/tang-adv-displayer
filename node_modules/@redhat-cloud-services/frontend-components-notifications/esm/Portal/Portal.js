var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useState } from 'react';
import { createPortal } from 'react-dom';
import Notification from '../Notification';
import NotificationPagination from '../NotificationPagination';
import '../Portal/portal.css';
var Portal = function (_a) {
    var _b = _a.notifications, notifications = _b === void 0 ? [] : _b, _c = _a.removeNotification, removeNotification = _c === void 0 ? function () { return undefined; } : _c, rootId = _a.rootId, onClearAll = _a.onClearAll;
    var _d = useState({ page: 1 }), state = _d[0], setState = _d[1];
    var onSetPage = function (_event, page) {
        setState(function (prev) { return (__assign(__assign({}, prev), { page: page })); });
    };
    var page = state.page;
    var slicedNotifications = notifications && notifications.length <= 5 ? notifications : notifications && notifications.slice((page - 1) * 5, page * 5);
    return notifications.length === 0
        ? null
        : createPortal(React.createElement("div", { className: "notifications-portal" },
            notifications.length > 5 && (React.createElement(NotificationPagination, { onSetPage: onSetPage, count: notifications.length, page: page, onClearAll: onClearAll })),
            slicedNotifications.map(function (props) { return (React.createElement(Notification, __assign({ onDismiss: removeNotification, key: "".concat(props.id) }, props))); })), rootId ? document.getElementById(rootId) || document.body : document.body);
};
export default Portal;
//# sourceMappingURL=Portal.js.map
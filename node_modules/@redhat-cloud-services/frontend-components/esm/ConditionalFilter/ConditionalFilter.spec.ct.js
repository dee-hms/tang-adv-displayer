import { jsx as _jsx } from "react/jsx-runtime";
import { mount } from '@cypress/react';
import ConditionalFilter from './ConditionalFilter';
describe('ConditionalFilter component', function () {
    var config = [
        {
            label: 'text',
        },
        {
            label: 'checkbox',
            type: 'checkbox',
            filterValues: {
                items: [
                    {
                        label: 'cfilter1',
                    },
                    {
                        label: 'cfilter2',
                    },
                ],
            },
        },
        {
            label: 'radio',
            type: 'radio',
            filterValues: {
                items: [
                    {
                        label: 'rfilter1',
                    },
                    {
                        label: 'rfilter2',
                    },
                ],
            },
        },
        {
            label: 'group',
            type: 'group',
            filterValues: {
                groups: [
                    {
                        label: 'group1',
                        type: 'checkbox',
                        groupSelectable: true,
                        items: [
                            {
                                label: 'gcitem1',
                                type: 'checkbox',
                            },
                            {
                                label: 'gcitem2',
                                type: 'checkbox',
                            },
                        ],
                    },
                ],
            },
        },
    ];
    it('renders empty', function () {
        mount(_jsx(ConditionalFilter, {}));
        cy.get('.ins-c-conditional-filter');
    });
    it('renders disabled', function () {
        mount(_jsx(ConditionalFilter, { isDisabled: true, items: config }));
        cy.get('.pf-c-dropdown').click({ force: true });
        cy.get('.pf-c-dropdown__menu').should('not.exist');
    });
    it('renders with data', function () {
        mount(_jsx(ConditionalFilter, { items: config }));
        cy.get('.ins-c-conditional-filter');
        cy.get('.pf-c-dropdown').click();
        cy.get('.pf-c-dropdown__menu').children().should('have.length', 4);
    });
    it('filter changes on click', function () {
        mount(_jsx(ConditionalFilter, { items: config }));
        cy.get('.pf-c-dropdown').click();
        cy.get('.pf-c-dropdown__menu').children().eq(1).click();
        cy.get('.pf-c-dropdown').should('not.contain.text', 'Text');
        cy.get('.pf-c-select').click();
        cy.get('.pf-c-select__menu');
    });
    it('onChange called', function () {
        var ocSpy = cy.spy().as('ocSpy');
        mount(_jsx(ConditionalFilter, { items: config, onChange: ocSpy }));
        cy.get('.pf-c-dropdown').click();
        cy.get('.pf-c-dropdown__menu').children().eq(2).click();
        cy.get('@ocSpy').should('have.been.called');
    });
});
//# sourceMappingURL=ConditionalFilter.spec.ct.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { useEffect, useState } from 'react';
import * as reactRouterDom from 'react-router-dom';
import { Table as PfTable, SortByDirection, TableBody, TableGridBreakpoint, TableHeader, TableVariant, cellWidth, expandable, sortable, } from '@patternfly/react-table';
console.error('"useInventory" hook is deprecated and will be removed in v4. Please use Chrome 2.0 compatible Inventory version.');
export var useInventory = function (_a) {
    var store = _a.store, tableReducer = _a.tableReducer, detailReducer = _a.detailReducer, getRegistry = _a.getRegistry;
    var cleenupCallback;
    var _b = useState({
        newReducers: null,
        rawReducers: null,
    }), inventory = _b[0], setInventory = _b[1];
    var _c = useState({
        InventoryTable: null,
        InventoryDetail: null,
        TagWithDialog: null,
    }), inventoryComponents = _c[0], setInventoryComponents = _c[1];
    useEffect(function () {
        (function () { return __awaiter(void 0, void 0, void 0, function () {
            var currStore, registry, _a, inventoryConnector, INVENTORY_ACTION_TYPES, mergeWithDetail, mergeWithEntities, newReducers, _b, InventoryDetailHead, AppInfo, InventoryTable, InventoryDetail, TagWithDialog;
            var _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        currStore = store;
                        return [4, insights.loadInventory({
                                reactRouterDom: reactRouterDom,
                                pfReactTable: {
                                    Table: PfTable,
                                    TableBody: TableBody,
                                    TableHeader: TableHeader,
                                    TableGridBreakpoint: TableGridBreakpoint,
                                    cellWidth: cellWidth,
                                    TableVariant: TableVariant,
                                    sortable: sortable,
                                    expandable: expandable,
                                    SortByDirection: SortByDirection,
                                },
                            })];
                    case 1:
                        _a = _e.sent(), inventoryConnector = _a.inventoryConnector, INVENTORY_ACTION_TYPES = _a.INVENTORY_ACTION_TYPES, mergeWithDetail = _a.mergeWithDetail, mergeWithEntities = _a.mergeWithEntities;
                        newReducers = {};
                        if (tableReducer) {
                            newReducers = __assign(__assign({}, newReducers), mergeWithEntities(tableReducer(INVENTORY_ACTION_TYPES)));
                        }
                        if (detailReducer) {
                            newReducers = __assign(__assign({}, newReducers), mergeWithDetail(detailReducer(INVENTORY_ACTION_TYPES)));
                        }
                        if (getRegistry && typeof getRegistry === 'function') {
                            registry = getRegistry();
                        }
                        if (!currStore && registry) {
                            currStore = (_c = registry === null || registry === void 0 ? void 0 : registry.getStore) === null || _c === void 0 ? void 0 : _c.call(registry);
                        }
                        _b = inventoryConnector(currStore), InventoryDetailHead = _b.InventoryDetailHead, AppInfo = _b.AppInfo, InventoryTable = _b.InventoryTable, InventoryDetail = _b.InventoryDetail, TagWithDialog = _b.TagWithDialog;
                        setInventory(function () { return ({
                            newReducers: newReducers,
                            rawReducers: {
                                mergeWithEntities: mergeWithEntities,
                                mergeWithDetail: mergeWithDetail,
                            },
                        }); });
                        if (registry) {
                            cleenupCallback = (_d = registry === null || registry === void 0 ? void 0 : registry.register) === null || _d === void 0 ? void 0 : _d.call(registry, newReducers);
                        }
                        setInventoryComponents(function () { return ({
                            InventoryDetail: {
                                InventoryDetailHead: InventoryDetailHead,
                                AppInfo: AppInfo,
                                InventoryDetail: InventoryDetail,
                            },
                            InventoryTable: InventoryTable,
                            TagWithDialog: TagWithDialog,
                        }); });
                        return [2];
                }
            });
        }); })();
        return function () {
            if (cleenupCallback && typeof cleenupCallback === 'function') {
                cleenupCallback();
            }
        };
    }, []);
    return __assign(__assign({}, inventory), inventoryComponents);
};
export default useInventory;
//# sourceMappingURL=useInventory.js.map
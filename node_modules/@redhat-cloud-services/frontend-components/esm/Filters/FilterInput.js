import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { Checkbox, Radio } from '@patternfly/react-core';
var FilterInput = function (_a) {
    var addRemoveFilters = _a.addRemoveFilters, _b = _a.param, param = _b === void 0 ? '' : _b, _c = _a.filters, filters = _c === void 0 ? {} : _c, _d = _a.type, type = _d === void 0 ? 'checkbox' : _d, value = _a.value, id = _a.id, label = _a.label;
    var _e = useState(false), checked = _e[0], setChecked = _e[1];
    useEffect(function () {
        var _a;
        if (type !== 'radio') {
            if (param in filters && ((_a = filters === null || filters === void 0 ? void 0 : filters[param]) === null || _a === void 0 ? void 0 : _a.includes(value))) {
                setChecked(true);
            }
            else {
                setChecked(false);
            }
        }
    }, []);
    var handleChange = function () {
        if (type === 'checkbox') {
            setChecked(!checked);
        }
        addRemoveFilters === null || addRemoveFilters === void 0 ? void 0 : addRemoveFilters(value, param, type, checked);
    };
    if (type !== 'radio') {
        return (_jsx(Checkbox, { "aria-label": String(label), id: id, isChecked: checked, label: label, onChange: handleChange, value: value, ouiaId: String(label) }));
    }
    return (_jsx(Radio, { isChecked: filters && !!value && !!param && filters[param] === value, "aria-label": String(label), id: id, label: label, name: param, onChange: handleChange, value: value, ouiaId: String(label) }));
};
export default FilterInput;
//# sourceMappingURL=FilterInput.js.map
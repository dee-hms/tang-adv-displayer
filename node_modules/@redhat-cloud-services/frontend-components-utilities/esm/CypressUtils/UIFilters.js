import _ from 'lodash';
import { CHIP, CHIP_GROUP, FILTERS_DROPDOWN, FILTER_TOGGLE } from './selectors';
import { findElementByOuiaId } from './CustomCommands';
findElementByOuiaId();
function applyFilters(filters, filtersConf) {
    for (var _i = 0, _a = Object.entries(filters); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        var item = filtersConf[key];
        cy.get('div.ins-c-primary-toolbar__filter').find('button[class=pf-c-dropdown__toggle]').click();
        cy.get(FILTERS_DROPDOWN).contains(item.selectorText).click();
        if (item.type === 'input') {
            cy.get('input.ins-c-conditional-filter').type(value);
        }
        else if (item.type === 'checkbox') {
            cy.get(FILTER_TOGGLE).click();
            value.forEach(function (it) {
                cy.get('ul[class=pf-c-select__menu]').find('label').contains(it).parent().find('input[type=checkbox]').check();
            });
            cy.get(FILTER_TOGGLE).click();
        }
        else if (item.type == 'radio') {
            cy.get(FILTER_TOGGLE).click();
            cy.get('ul[class=pf-c-select__menu]').find('label').contains(value).parent().find('input[type=radio]').check();
        }
        else {
            throw "".concat(item.type, " not recognized");
        }
    }
}
function urlParamConvert(key, value, filters) {
    var filterCategory = _.find(_.values(filters), function (it) { return it.urlParam === key; });
    var title;
    var label;
    if (filterCategory === undefined) {
        title = _.capitalize(key);
        label = value;
    }
    else {
        title = _.capitalize(filterCategory.title);
        label = _.find(filterCategory.values, function (it) { return it.value === value; }).label.props.children;
    }
    return [title, label];
}
function hasChip(name, value) {
    cy.contains(CHIP_GROUP, name).parent().contains(CHIP, value);
}
function filter(conf, data, filters) {
    var filteredData = data;
    var _loop_1 = function (key, value) {
        filteredData = _.filter(filteredData, function (it) { return conf[key].filterFunc(it, value); });
        if (filteredData.length === 0) {
            return "break";
        }
    };
    for (var _i = 0, _a = Object.entries(filters); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        var state_1 = _loop_1(key, value);
        if (state_1 === "break")
            break;
    }
    return filteredData;
}
function removeAllChips() {
    cy.get(CHIP_GROUP)
        .find(CHIP)
        .ouiaId('close', 'button')
        .each(function () {
        cy.get(CHIP_GROUP).find(CHIP).ouiaId('close', 'button').eq(0).click();
    });
}
export { applyFilters, urlParamConvert, hasChip, filter, removeAllChips };
//# sourceMappingURL=UIFilters.js.map
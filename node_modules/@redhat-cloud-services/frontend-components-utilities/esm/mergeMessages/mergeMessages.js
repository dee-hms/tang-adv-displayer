"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var program = require('commander');
var fs = require('fs');
var globSync = require('glob').sync;
var mkdirpSync = require('mkdirp').sync;
var last = require('lodash/last');
var MESSAGES_PATTERN = 'build/messages/**/*.json';
var LANG_DIR = 'locales/';
var LANG_PATTERN = '';
var IGNORED = ['translations', 'data'];
program
    .option('-p, --pattern <value>', 'file pattern')
    .option('-I, --ignore-files <value>', 'array of ignored files')
    .option('-L, --lang-pattern <value>', 'pattern to look for files with languages')
    .option('-l, --lang-dir <dir>', 'folder with languages');
var rootFolder = "".concat(process.cwd(), "/");
program.parse(process.argv);
if (program.ignoreFiles) {
    IGNORED = program.ignoreFiles.split(',');
}
if (program.pattern) {
    MESSAGES_PATTERN = program.pattern;
}
if (program.langDir) {
    LANG_DIR = program.langDir;
}
if (program.langPattern) {
    LANG_PATTERN = "".concat(LANG_DIR).concat(program.langPattern);
}
else {
    LANG_PATTERN = "".concat(LANG_DIR, "/*.json");
}
var mergedTranslations = globSync("".concat(rootFolder).concat(LANG_PATTERN))
    .map(function (filename) {
    var _a;
    var locale = last(filename.split('/')).split('.json')[0];
    if (!IGNORED.includes(locale)) {
        return _a = {}, _a[locale] = JSON.parse(fs.readFileSync(filename, 'utf8')), _a;
    }
})
    .reduce(function (acc, localeObj) {
    return __assign(__assign({}, acc), localeObj);
}, {});
var defaultMessages = globSync("".concat(rootFolder).concat(MESSAGES_PATTERN))
    .map(function (filename) { return fs.readFileSync(filename, 'utf8'); })
    .map(function (file) { return JSON.parse(file); })
    .reduce(function (collection, descriptors) {
    descriptors.forEach(function (_a) {
        var id = _a.id, defaultMessage = _a.defaultMessage;
        if (collection.hasOwnProperty(id)) {
            throw new Error("Duplicate message id: ".concat(id));
        }
        collection[id] = defaultMessage;
    });
    return collection;
}, {});
mkdirpSync("".concat(rootFolder).concat(LANG_DIR));
fs.writeFileSync("".concat(rootFolder).concat(LANG_DIR, "data.json"), JSON.stringify(__assign({ en: defaultMessages || {} }, mergedTranslations), null, 2));
fs.writeFileSync("".concat(rootFolder).concat(LANG_DIR, "translations.json"), JSON.stringify(__assign({}, defaultMessages) || {}, null, 2));
//# sourceMappingURL=mergeMessages.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var react_core_1 = require("@patternfly/react-core");
var react_icons_1 = require("@patternfly/react-icons");
var groupFilterConstants_1 = require("./groupFilterConstants");
var groupType_1 = __importDefault(require("./groupType"));
require("./group-filter.css");
var GroupFilter = function (_a) {
    var className = _a.className, _b = _a.filterBy, filterBy = _b === void 0 ? '' : _b, _c = _a.groups, groups = _c === void 0 ? [] : _c, items = _a.items, _d = _a.isFilterable, isFilterable = _d === void 0 ? false : _d, onFilter = _a.onFilter, onChange = _a.onChange, onShowMore = _a.onShowMore, placeholder = _a.placeholder, selected = _a.selected, showMoreTitle = _a.showMoreTitle, showMoreOptions = _a.showMoreOptions, isDisabled = _a.isDisabled;
    var _e = (0, react_1.useState)({}), stateSelected = _e[0], setStateSelected = _e[1];
    var _f = (0, react_1.useState)(''), searchString = _f[0], setSearchString = _f[1];
    var _g = (0, react_1.useState)(false), isOpen = _g[0], setIsOpen = _g[1];
    var toggleRef = (0, react_1.useRef)(null);
    var containerRef = (0, react_1.useRef)(null);
    var menuRef = (0, react_1.useRef)(null);
    var inputRef = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(function () {
        selected && setStateSelected(selected);
    }, [selected]);
    (0, react_1.useEffect)(function () {
        setSearchString(filterBy);
    }, [filterBy]);
    var handleMenuKeys = function (event) {
        var _a, _b, _c;
        if (!isOpen) {
            return;
        }
        if (((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            if (event.key === 'Escape' || event.key === 'Enter') {
                setIsOpen(!isOpen);
                (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
            }
        }
    };
    var handleClickOutside = function (event) {
        var _a;
        if (isOpen && !((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
            setIsOpen(false);
        }
    };
    (0, react_1.useEffect)(function () {
        window.addEventListener('keydown', handleMenuKeys);
        window.addEventListener('click', handleClickOutside);
        return function () {
            window.removeEventListener('keydown', handleMenuKeys);
            window.removeEventListener('click', handleClickOutside);
        };
    }, [isOpen, menuRef]);
    var onToggleClick = function (ev) {
        ev.stopPropagation();
        ev.persist();
        setIsOpen(!isOpen);
    };
    var menuItems = (0, groupFilterConstants_1.getMenuItems)((items === null || items === void 0 ? void 0 : items.map(function (item) { return (item.type === groupType_1.default.treeView ? (0, groupFilterConstants_1.convertTreeItem)(item) : item); })) || [], onChange, (0, groupFilterConstants_1.calculateSelected)(selected || {}));
    var groupMenuItems = (0, groupFilterConstants_1.getGroupMenuItems)(groups, onChange, (0, groupFilterConstants_1.calculateSelected)(selected || {}));
    var renderItem = function (item, key, type, groupKey) {
        if (groupKey === void 0) { groupKey = ''; }
        return ((0, jsx_runtime_1.jsx)(react_core_1.MenuItem, __assign({ itemId: key, className: item === null || item === void 0 ? void 0 : item.className, onClick: item.onClick && (type || item.type) === groupType_1.default.checkbox
                ? function (e) {
                    item.onClick && item.onClick();
                    e.preventDefault();
                }
                : undefined }, { children: (type || item.type) === groupType_1.default.treeView ? ((0, jsx_runtime_1.jsx)(react_core_1.TreeView, { data: [(0, groupFilterConstants_1.mapTree)(item, groupKey, stateSelected, selected || {})], onCheck: function (e, value) { return (0, groupFilterConstants_1.onTreeCheck)(e, value, [item]); }, hasChecks: true })) : (type || item.type) === groupType_1.default.checkbox ? ((0, jsx_runtime_1.jsx)(react_core_1.Checkbox, __assign({}, item, { label: item === null || item === void 0 ? void 0 : item.label, isChecked: (item === null || item === void 0 ? void 0 : item.isChecked) || (0, groupFilterConstants_1.isChecked)(groupKey, (item === null || item === void 0 ? void 0 : item.value) || key, item === null || item === void 0 ? void 0 : item.id, item === null || item === void 0 ? void 0 : item.tagValue, stateSelected, selected || {}) || false, onChange: function (value, event) {
                    var _a;
                    (_a = item === null || item === void 0 ? void 0 : item.onChange) === null || _a === void 0 ? void 0 : _a.call(item, value, event);
                }, onClick: item.onClick
                    ? function (e) {
                        item.onClick && item.onClick();
                        e.stopPropagation();
                    }
                    : undefined, name: (item === null || item === void 0 ? void 0 : item.name) || (item === null || item === void 0 ? void 0 : item.value) || "".concat(groupKey, "-").concat(key), id: (item === null || item === void 0 ? void 0 : item.id) || (item === null || item === void 0 ? void 0 : item.value) || "".concat(groupKey, "-").concat(key) }))) : (type || item.type) === groupType_1.default.radio ? ((0, jsx_runtime_1.jsx)(react_core_1.Radio, __assign({}, item, { isChecked: (item === null || item === void 0 ? void 0 : item.isChecked) || (0, groupFilterConstants_1.isChecked)(groupKey, (item === null || item === void 0 ? void 0 : item.value) || key, item === null || item === void 0 ? void 0 : item.id, item === null || item === void 0 ? void 0 : item.tagValue, stateSelected, selected || {}) || false, onChange: function (value, event) {
                    var _a;
                    (_a = item === null || item === void 0 ? void 0 : item.onChange) === null || _a === void 0 ? void 0 : _a.call(item, value, event);
                }, value: (item === null || item === void 0 ? void 0 : item.value) || key, name: (item === null || item === void 0 ? void 0 : item.name) || (item === null || item === void 0 ? void 0 : item.value) || "".concat(groupKey, "-").concat(key), label: (item === null || item === void 0 ? void 0 : item.label) || '', id: (item === null || item === void 0 ? void 0 : item.id) || (item === null || item === void 0 ? void 0 : item.value) || "".concat(groupKey, "-").concat(key) }))) : (type || item.type) === groupType_1.default.button ? ((0, jsx_runtime_1.jsx)(react_core_1.Button, __assign({ id: item.id, className: "pf-c-select__option-button ".concat((item === null || item === void 0 ? void 0 : item.className) || ''), variant: item === null || item === void 0 ? void 0 : item.variant, onClick: item.onClick }, { children: item === null || item === void 0 ? void 0 : item.label }))) : ((item === null || item === void 0 ? void 0 : item.label) || '') }), "".concat(item.value, "-").concat(key, "-item")));
    };
    var renderItems = function (items, type, groupKey) {
        if (groupKey === void 0) { groupKey = ''; }
        return items.map(function (item, key) {
            return (type || item.type) === groupType_1.default.treeView ? ((0, jsx_runtime_1.jsx)("div", __assign({ className: "ins-c-tree-view" }, { children: renderItem(item, key, type, groupKey) }), "".concat(item.value, "-").concat(key, "-item"))) : (renderItem(item, key, type, groupKey));
        });
    };
    var hasFocus = document.activeElement === inputRef.current || document.activeElement === toggleRef.current;
    var searchDirty = hasFocus && (searchString === null || searchString === void 0 ? void 0 : searchString.length) > 0;
    var setFilter = function (value) {
        setSearchString(value);
        onFilter === null || onFilter === void 0 ? void 0 : onFilter(value);
    };
    return ((0, jsx_runtime_1.jsx)("div", __assign({ ref: containerRef }, { children: (0, jsx_runtime_1.jsx)(react_core_1.Popper, { appendTo: containerRef.current, trigger: (0, jsx_runtime_1.jsx)(react_core_1.MenuToggle, __assign({ "aria-label": "Group filter", ref: toggleRef, onClick: function (e) { return onToggleClick(e); }, isExpanded: isOpen, className: className, isDisabled: isDisabled }, { children: isFilterable || onFilter ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(react_core_1.TextInput, { ref: inputRef, className: (0, classnames_1.default)({
                                'ins-c-input__clearable': searchDirty,
                            }), onChange: function (value) { return setFilter(value); }, onClick: function (e) { return e.preventDefault(); }, onKeyDown: function (e) {
                                if (e.key === ' ' || e.key === 'Escape') {
                                    e.preventDefault();
                                    setFilter(e.key === ' ' ? "".concat(searchString, " ") : '');
                                    e.key === 'Escape' && setIsOpen(false);
                                }
                            }, isDisabled: isDisabled, "aria-label": "input with dropdown and clear button", placeholder: placeholder, value: searchString, tabIndex: 0, type: "text" }), searchDirty && ((0, jsx_runtime_1.jsx)("span", __assign({ className: "ins-c-icon__link" }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.CloseIcon, { onClick: function () {
                                    setFilter('');
                                    setIsOpen(false);
                                } }) })))] })) : (placeholder) })), popper: (0, jsx_runtime_1.jsx)(react_core_1.Menu, __assign({ ref: menuRef, className: (0, classnames_1.default)('ins-c-menu__scrollable', className, { 'pf-m-expanded': isOpen }) }, { children: (0, jsx_runtime_1.jsx)(react_core_1.MenuContent, { children: (0, jsx_runtime_1.jsxs)(react_core_1.MenuList, __assign({ "aria-label": "Group filter" }, { children: [menuItems.length > 0 && (0, jsx_runtime_1.jsx)(react_core_1.MenuGroup, { children: renderItems(menuItems) }), groupMenuItems.map(function (group, groupKey) { return ((0, jsx_runtime_1.jsx)(react_core_1.MenuGroup, __assign({ label: !group.groupSelectable && typeof group.label === 'string' ? group.label : undefined }, { children: renderItems(group.items, group.type, group.value) }), "".concat(group.label, "-").concat(groupKey, "-group"))); }), onShowMore ? ((0, jsx_runtime_1.jsx)(react_core_1.MenuItem, __assign({ itemId: "loader", className: "ins-c-menu__show--more" }, showMoreOptions, { onClick: function (e) { return onShowMore(e); } }, { children: showMoreTitle }))) : ((0, jsx_runtime_1.jsx)("span", { hidden: true, value: "" }))] })) }) })), isVisible: isOpen }) })));
};
exports.default = GroupFilter;
//# sourceMappingURL=GroupFilter.js.map
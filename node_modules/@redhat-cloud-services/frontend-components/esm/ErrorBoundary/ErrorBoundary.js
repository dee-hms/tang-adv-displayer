var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import PageHeader, { PageHeaderTitle } from '../PageHeader';
import ErrorState from '../ErrorState';
import { ExpandableSection } from '@patternfly/react-core';
import ErrorStack from './ErrorStack';
import Section from '../Section';
var ErrorBoundaryPage = (function (_super) {
    __extends(ErrorBoundaryPage, _super);
    function ErrorBoundaryPage(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            hasError: false,
            historyState: history.state,
        };
        return _this;
    }
    ErrorBoundaryPage.getDerivedStateFromError = function (error) {
        return { hasError: true, error: error, historyState: history.state };
    };
    ErrorBoundaryPage.prototype.render = function () {
        if (this.state.historyState !== history.state) {
            this.setState({
                hasError: false,
                historyState: history.state,
            });
        }
        if (this.state.hasError) {
            if (this.props.silent) {
                return null;
            }
            return (_jsxs("div", { children: [_jsx(PageHeader, { children: _jsx(PageHeaderTitle, { title: this.props.headerTitle }) }), _jsx(Section, { children: _jsx(ErrorState, { errorTitle: this.props.errorTitle, errorDescription: _jsxs(_Fragment, { children: [_jsx("span", { children: this.props.errorDescription }), this.state.error && (_jsx(ExpandableSection, __assign({ toggleText: "Show details" }, { children: _jsx(ErrorStack, { error: this.state.error }) })))] }) }) })] }));
        }
        return this.props.children;
    };
    return ErrorBoundaryPage;
}(React.Component));
export default ErrorBoundaryPage;
//# sourceMappingURL=ErrorBoundary.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var react_core_1 = require("@patternfly/react-core");
var FilterInput = function (_a) {
    var addRemoveFilters = _a.addRemoveFilters, _b = _a.param, param = _b === void 0 ? '' : _b, _c = _a.filters, filters = _c === void 0 ? {} : _c, _d = _a.type, type = _d === void 0 ? 'checkbox' : _d, value = _a.value, id = _a.id, label = _a.label;
    var _e = (0, react_1.useState)(false), checked = _e[0], setChecked = _e[1];
    (0, react_1.useEffect)(function () {
        var _a;
        if (type !== 'radio') {
            if (param in filters && ((_a = filters === null || filters === void 0 ? void 0 : filters[param]) === null || _a === void 0 ? void 0 : _a.includes(value))) {
                setChecked(true);
            }
            else {
                setChecked(false);
            }
        }
    }, []);
    var handleChange = function () {
        if (type === 'checkbox') {
            setChecked(!checked);
        }
        addRemoveFilters === null || addRemoveFilters === void 0 ? void 0 : addRemoveFilters(value, param, type, checked);
    };
    if (type !== 'radio') {
        return ((0, jsx_runtime_1.jsx)(react_core_1.Checkbox, { "aria-label": String(label), id: id, isChecked: checked, label: label, onChange: handleChange, value: value, ouiaId: String(label) }));
    }
    return ((0, jsx_runtime_1.jsx)(react_core_1.Radio, { isChecked: filters && !!value && !!param && filters[param] === value, "aria-label": String(label), id: id, label: label, name: param, onChange: handleChange, value: value, ouiaId: String(label) }));
};
exports.default = FilterInput;
//# sourceMappingURL=FilterInput.js.map